[
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_1",
        "student_answer": "1.1 High risk problems are address in the prototype program to make sure that the program is feasible. A prototype may also be used to show a company that the software can be possibly programmed.",
        "human_scores": [
            3.5,
            4.0,
            3.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.0
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_2",
        "student_answer": "1.1 To simulate portions of the desired final product with a quick and easy program that does a small specific job. It is a way to help see what the problem is and how you may solve it in the final project.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_3",
        "student_answer": "1.1 A prototype program simulates the behaviors of portions of the desired software product to allow for error checking.",
        "human_scores": [
            4.0,
            5.0,
            3.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 4.5
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_4",
        "student_answer": "1.1 Defined in the Specification phase a prototype stimulates the behavior of portions of the desired software product. Meaning, the role of a prototype is a temporary solution until the program itself is refined to be used extensively in problem solving.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_5",
        "student_answer": "1.1 It is used to let the users have a first idea of the completed program and allow the clients to evaluate the program. This can generate much feedback including software specifications and project estimations of the total project.",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 2.0
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_6",
        "student_answer": "1.1 To find problem and errors in a program before it is finalized",
        "human_scores": [
            2.0,
            2.0,
            2.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.5
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_7",
        "student_answer": "1.1 To address major issues in the creation of the program. There is no way to account for all possible bugs in the program, but it is possible to prove the program is tangible.",
        "human_scores": [
            2.5,
            3.0,
            2.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 2.0
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_8",
        "student_answer": "1.1 you can break the whole program into prototype programs to simulate parts of the final program",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_9",
        "student_answer": "1.1 -To provide an example or model of how the finished program should perfom. -Provides forsight of some of the challanges that would be encountered. -Provides opportunity To introduce changes To the finished program.",
        "human_scores": [
            3.5,
            5.0,
            2.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 3.0
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_10",
        "student_answer": "1.1 Simulating the behavior of only a portion of the desired software product.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_11",
        "student_answer": "1.1 A program that stimulates the behavior of portions of the desired software product.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_12",
        "student_answer": "1.1 A program that simulates the behavior of portions of the desired software product.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.75
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_13",
        "student_answer": "1.1 To lay out the basics and give you a starting point in the actual problem solving.",
        "human_scores": [
            2.0,
            2.0,
            2.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 1.5
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_14",
        "student_answer": "1.1 To simulate problem solving for parts of the problem",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.25
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_15",
        "student_answer": "1.1 A prototype program provides a basic groundwork from which to further enhance and improve a solution to a problem.",
        "human_scores": [
            2.0,
            2.0,
            2.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 2.0
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_16",
        "student_answer": "1.1 A prototype program is a part of the Specification phase of Software Problem Solvin. It's employed to illustrate how the key problem or problems will be solved in a program, and sometimes serves as a base program to expand upon.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.5
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_17",
        "student_answer": "1.1 Program that simulates the behavior of portions of the desired software product",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_18",
        "student_answer": "1.1 it provides a limited proof of concept to verify with the client before actually programming the whole application.",
        "human_scores": [
            2.0,
            2.0,
            2.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 3.25
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_19",
        "student_answer": "1.1 It tests the main function of the program while leaving out the finer details.",
        "human_scores": [
            2.0,
            2.0,
            2.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 3.25
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_20",
        "student_answer": "1.1 To get early feedback from users in early stages of development. To show users a first idea of what the program will do/look like. To make sure the program will meet requirements before intense programming begins.",
        "human_scores": [
            2.5,
            3.0,
            2.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 3.0
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_21",
        "student_answer": "1.1 it simulates the behavior of portions of the desired software product",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_22",
        "student_answer": "1.1 It simulates the behavior of portions of the desired software product.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_23",
        "student_answer": "1.1 A prototype program is used in problem solving to collect data for the problem.",
        "human_scores": [
            1.5,
            1.0,
            2.0
        ],
        "human_avg_score": 1.5,
        "procot_score": 1.0
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_24",
        "student_answer": "1.1 To ease the understanding of problem under discussion and to ease the understanding of the program itself",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 1.5
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_25",
        "student_answer": "1.1 it simulates the behavior of portions of the desired software product",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_26",
        "student_answer": "1.1 The role of a prototype program is to help spot key problems that may arise during the actual programing.",
        "human_scores": [
            2.0,
            2.0,
            2.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 1.5
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_27",
        "student_answer": "1.1 the prototype program gives a general idea of what the end product will do, without the time and effort to write out the entire program.",
        "human_scores": [
            3.0,
            4.0,
            2.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 3.0
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_28",
        "student_answer": "1.1 to show that a certain part of the program works as it is supposed to",
        "human_scores": [
            3.0,
            4.0,
            2.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 2.75
    },
    {
        "question": "1.1 What is the role of a prototype program in problem solving?",
        "student_id": "student_29",
        "student_answer": "1.1 Prototype programming is an approach to programming that enables one to take an organized approach to developing an effective program with minimal errors and a strategic pattern when solving a problem. i.e. book gave an example of a costumer withdrawing money from a bank, the approach that was taking on a pseudo code level during the OOA/Design lvl before proceeding into creating a solution.",
        "human_scores": [
            2.5,
            3.0,
            2.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 2.0
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_1",
        "student_answer": "1.2 Refining and possibly the design if the testing phase reveals problems in the design. Production can be affected if the program is unworkable in its current form which will lead to a later production time than originally estimated. Also affects coding because after testing you may need to rewrite the code for the program to remove errors.",
        "human_scores": [
            3.5,
            5.0,
            2.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 3.75
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_2",
        "student_answer": "1.2 The implementation phase and the maintenance phase are effected",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.5
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_3",
        "student_answer": "1.2 Verification, coding, refining the solution and maintenance are all influenced by the testing stage.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 4.0
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_4",
        "student_answer": "1.2 In RUP the stages in the software life cycle are influenced by the testing stage is: Elaboration phase- refined progject vision, iterative devilopment of core system, development of system requirements, more accurate time and cost estimates. Construction phase- iterative development of remaining system. Transition phase-testing and deployment of the system.",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.0
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_5",
        "student_answer": "1.2 Refining the solution, Production and Maintenance are all influenced by the Testing stage.",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 3.0
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_6",
        "student_answer": "1.2 Elaboration, Construction, and Transition are all affected by testing",
        "human_scores": [
            2.0,
            2.0,
            2.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 1.75
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_7",
        "student_answer": "1.2 Refining, Production, Maintenance",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.5
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_8",
        "student_answer": "1.2 Refining the solution",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 0.75
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_9",
        "student_answer": "1.2 -Verification -Debugging",
        "human_scores": [
            2.0,
            3.0,
            1.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.0
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_10",
        "student_answer": "1.2 Refining and Coding",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_11",
        "student_answer": "1.2 The second half of the Elaboration phase, Construction phase, and the Transition phase.",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 1.5
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_12",
        "student_answer": "1.2 The refining step, the production step, and the maintenance stage.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.75
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_13",
        "student_answer": "1.2 Elaboration, Construction, Transition",
        "human_scores": [
            2.0,
            2.0,
            2.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 1.0
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_14",
        "student_answer": "1.2 Refining.",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.0
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_15",
        "student_answer": "1.2 The testing stage has a direct influence on the final version of a program, being as it is the debugging and finalization of a software revision.",
        "human_scores": [
            1.5,
            2.0,
            1.0
        ],
        "human_avg_score": 1.5,
        "procot_score": 1.5
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_16",
        "student_answer": "1.2 Directly: Refining, coding. Because Refining is right before the Testing Phase and Coding is right after the Testing Phase. Indirectly: Production, Maintenance. Because Refining occurs before these last two stages in the Software Life Cycle.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_17",
        "student_answer": "1.2 Testing, refining, production, and maintenance.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.0
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_18",
        "student_answer": "1.2 Depending on how the work is done, Testing is spread throughout the process as to prevent errors from showing up later on due to lack of foresight.",
        "human_scores": [
            1.5,
            2.0,
            1.0
        ],
        "human_avg_score": 1.5,
        "procot_score": 0.0
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_19",
        "student_answer": "1.2 Elaboration, construction, and transition.",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 1.0
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_20",
        "student_answer": "1.2 All stages are influenced except setting the program requirements. If a test fails, it can change the whole design, implementation, etc of a program as well as the final outcome.",
        "human_scores": [
            1.5,
            2.0,
            1.0
        ],
        "human_avg_score": 1.5,
        "procot_score": 2.0
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_21",
        "student_answer": "1.2 Refining, production, and maintenance",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 2.0
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_22",
        "student_answer": "1.2 coding and refining",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.0
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_23",
        "student_answer": "1.2 refining, production, maintenance.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.0
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_24",
        "student_answer": "1.2 Removing logical errors, testing for valid data, random data and actual data.",
        "human_scores": [
            1.0,
            2.0,
            0.0
        ],
        "human_avg_score": 1.0,
        "procot_score": 0.0
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_25",
        "student_answer": "1.2 1- specification 2- design 3- risk analysis 4- verification 5- coding 6- testing 7- refining 8- production 9- maintenance",
        "human_scores": [
            2.5,
            1.0,
            4.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 2.5
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_26",
        "student_answer": "1.2 Refining stage, Production stage, and Maintenance stage.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.75
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_27",
        "student_answer": "1.2 Testing could affect all parts of the life cycle; it could make you go back to specification if it does not test well.",
        "human_scores": [
            2.0,
            2.0,
            2.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.5
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_28",
        "student_answer": "1.2 coding",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 2.25
    },
    {
        "question": "1.2 What stages in the software life cycle are influenced by the testing stage?",
        "student_id": "student_29",
        "student_answer": "1.2 The Individual components and steps such as analysis, design, and implementing code as well as the entire system are tested for execution of the requirements identified during the analysis stage. i.e. Main output",
        "human_scores": [
            1.5,
            1.0,
            2.0
        ],
        "human_avg_score": 1.5,
        "procot_score": 1.5
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_1",
        "student_answer": "1.3 Modularability, the ability to reuse parts of the program later in another program sometimes with completely different goals for the program. Also it makes it easier to debug code by dividing up the code into classes that each do a specific job and when the program fails at one job you only have one class to debug. Good for security purposes because it allows you to let someone use a program which sorts lists without having to give them access to the source code. ALso allows you to use inheritance and polymorphism.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.5
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_2",
        "student_answer": "1.3 This type of programming is more flexible, making it easier to add and modify the program. It is also a type of a fail safe program, you check each individual module. This eliminates redundant code and makes the program easier to read for other programmers. When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 1.25
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_3",
        "student_answer": "1.3 The main advantages to object-oriented programming are that existing classes can be reused and program maintenance and verification are easier.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.5
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_4",
        "student_answer": "1.3 The advantages is that OOP allows us to build classes of objects. Three principles that make up OOP are: Encapsulation- Objects combine data and operations. Inheritance- Classes can inherit properties from other classes. Polymorphism- Objects can determine appropriate operations at execution time.",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.5
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_5",
        "student_answer": "1.3 Some advantages are existing classes can be reused and program maintenance and verification are easier to accomplish.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.75
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_6",
        "student_answer": "1.3 Object oriented programming allows programmers to use an object with classes that can be changed and manipulated while not affecting the entire object at once. The classes all hold attrubutes that affect the object.",
        "human_scores": [
            1.0,
            1.0,
            1.0
        ],
        "human_avg_score": 1.0,
        "procot_score": 0.5
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_7",
        "student_answer": "1.3 Reusable components, Extensibility, Maintainability, it reduces large problems into smaller more manageable problems.",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.5
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_8",
        "student_answer": "1.3 Encapsulation-objects combine data and operations Inheritance- classes can inherit properties from other classes Polymorphism- Objects can determine appropriate operations at execution time",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 1.5
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_9",
        "student_answer": "1.3 -Easier to debugg -Reusability",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 3.25
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_10",
        "student_answer": "1.3 Re-usability and ease of maintenance",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.75
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_11",
        "student_answer": "1.3 One of the main advantages is you can hide inner details a technique known by encapsulation. Objects combine the data and operations but you cannot see how it works. Another advantage is you can reuse classes that have been defined earlier in the program, a method known as inheritance. Finally another advantage is objects can determine appropriate operations at execution time a technique known as polymorphism.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.25
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_12",
        "student_answer": "1.3 Existing classes can be reused, and program maintenance and verification are easier.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.75
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_13",
        "student_answer": "1.3 Using different modules allows for easier debugging",
        "human_scores": [
            2.0,
            2.0,
            2.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.5
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_14",
        "student_answer": "1.3 Data encapsulation concept,the use of functions or methods to manipulate data.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 0.5
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_15",
        "student_answer": "1.3 Modular, reusable code, allowing faster deployment of solutions, and a more general view of a solution.",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.0
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_16",
        "student_answer": "1.3 Coding and Debugging programs are usually easier, as either the compiler will specify the object that is working incorrectly, or the function an object was assigned to will be easier to identify. The code itself also looks more organized and is easier to read and will help to avoid redundant coding. Post-programming maintenance is also easier. Also, modules can be reused several times in other programs without too much hassle. Abstraction is the art of breaking down one big problem into smaller, simpler problems and solving them. Many of the smaller problems are shared between unique complex problems, and creating modules to these solve these smaller repeated problems can save time when you encounter them again.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_17",
        "student_answer": "1.3 Variables can remain private. The code is easily modified and reusable, as well as easily implemented. Not to mention easier to read and follow along as an observer.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.25
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_18",
        "student_answer": "1.3 Data Abstraction and control... it is possible to isolate elements from other elements a lot easier and prevent tampering of data.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.5
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_19",
        "student_answer": "1.3 Encapsulation - Objects use operations without knowing how the operation works. Inheritance - cuts redundancy by reusing earlier classes. Polymorphism - objects select the correct operation to use in the situation.",
        "human_scores": [
            4.0,
            5.0,
            3.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.5
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_20",
        "student_answer": "1.3 They make it easier to reuse and adapt previously written code and they separate complex programs into smaller, easier to understand classes.",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.25
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_21",
        "student_answer": "1.3 Existing classes can be reused, Program maintenance and verification are easier",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.25
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_22",
        "student_answer": "1.3 Existing classes can be feused, Program maintenance and verification are easier",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.5
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_23",
        "student_answer": "1.3 the main advantages to object-oriented programming is data abstraction, easier maintenance, and re-usability.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_24",
        "student_answer": "1.3 Existing classes can be reused Program maintenance and verifications are easy",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.75
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_25",
        "student_answer": "1.3 1- Existing classes can be reused 2- Program maintenance and verification are easier",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.75
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_26",
        "student_answer": "1.3 Information can be hidden. It is easier to debug. Programming is easier and more manageable.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 0.5
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_27",
        "student_answer": "1.3 Existing classes can be reused, program maintenance and verification are easier.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.75
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_28",
        "student_answer": "1.3 existing classes can be reused program maintenance and verification are easier",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.25
    },
    {
        "question": "1.3 What are the main advantages associated with object-oriented programming?",
        "student_id": "student_29",
        "student_answer": "1.3 Well for one encapsulation the values of the variables inside an object are private, unless methods are written to pass info outside of the object. As well as Inheritance where each subclass inherits all variables and methods of its super class. Example in the book included obj clock and how obj alarm would still use clock from the first class.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.75
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_1",
        "student_answer": "1.4 At function 'int main ()'",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_2",
        "student_answer": "1.4 the Function main().",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_3",
        "student_answer": "1.4 c++ programs begin to execute in the main method.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_4",
        "student_answer": "1.4 A C++ program will begin to execute at the main() function.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_5",
        "student_answer": "1.4 They begin in the main() function.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_6",
        "student_answer": "1.4 Int main()",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_7",
        "student_answer": "1.4 main method",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_8",
        "student_answer": "1.4 in the testing phase",
        "human_scores": [
            0.0,
            0.0,
            0.0
        ],
        "human_avg_score": 0.0,
        "procot_score": 0.0
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_9",
        "student_answer": "1.4 -At the MAIN function",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_10",
        "student_answer": "1.4 main",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_11",
        "student_answer": "1.4 They begin to execute at the funcion main().",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_12",
        "student_answer": "1.4 The main method.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_13",
        "student_answer": "1.4 At the root",
        "human_scores": [
            2.5,
            0.0,
            5.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.0
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_14",
        "student_answer": "1.4 In the main() function.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_15",
        "student_answer": "1.4 C++ programs begin execution at main.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.25
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_16",
        "student_answer": "1.4 In the Main function..?",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.75
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_17",
        "student_answer": "1.4 At the \"main()\" function",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_18",
        "student_answer": "1.4 The main function.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_19",
        "student_answer": "1.4 The function main",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_20",
        "student_answer": "1.4 After loading the required include statements and libraries, the main method begins the execution.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_21",
        "student_answer": "1.4 main function",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_22",
        "student_answer": "1.4 main",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_23",
        "student_answer": "1.4 C++ programs begin execution at the main function.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_24",
        "student_answer": "1.4 At main",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_25",
        "student_answer": "1.4 they beging to excute at main",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_26",
        "student_answer": "1.4 at the main function int main() {}",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_27",
        "student_answer": "1.4 C++ programs begin execution at the main function.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_28",
        "student_answer": "1.4 in the \"main\" function",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.4 Where do C++ programs begin to execute?",
        "student_id": "student_29",
        "student_answer": "1.4 Within the main function",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.75
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_1",
        "student_answer": "1.5 Variable can be a integer or a string in a program.",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.25
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_2",
        "student_answer": "1.5 In programming, a structure that holds data and is uniquely named by the programmer. It holds the data assigned to it until a new value is assigned or the program is finished.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.4
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_3",
        "student_answer": "1.5 A variable is a location in memory where a value can be stored.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_4",
        "student_answer": "1.5 Variable is a location in the computer's memory, in which a value can be stored and later can retrieve that value.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.9
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_5",
        "student_answer": "1.5 A variable is a location in the computer's memory where a value can be stored for use by a program. Each variable has a name, a value, a type and a size.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 1.875
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_6",
        "student_answer": "1.5 A named object that can hold a numerical or letter value",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 0.65
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_7",
        "student_answer": "1.5 It's a sybol or name for a value/number. Example: 'a_used_number' can stand for any given number, and the programmer can refer to that number by using the variable name.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 0.5
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_8",
        "student_answer": "1.5 A variable is a location in the computers memory where a value can be stored for use by a program",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_9",
        "student_answer": "1.5 -An identifier that holds a location in memory.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.75
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_10",
        "student_answer": "1.5 a block of memory that holds a specific type of data",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 1.6
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_11",
        "student_answer": "1.5 It is a location in the computer's memory where it can be stored for use by a program.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.4
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_12",
        "student_answer": "1.5 A location in memory where value can be stored.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_13",
        "student_answer": "1.5 a value/word that can assume any of a set of values",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.625
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_14",
        "student_answer": "1.5 A pointer to a location in memory.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.15
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_15",
        "student_answer": "1.5 A variable is the memory address for a specific type of stored data, or from a mathematical perspective, a symbol representing a fixed definition with changing values.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.375
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_16",
        "student_answer": "1.5 A variable is a value that is subject to change in a computer's memory that can be used by programs. Programs can change the value of the variable and recall it later or act on it directly.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 1.625
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_17",
        "student_answer": "1.5 a symbol that stands in for a value that may or may not change depending on the program.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.0
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_18",
        "student_answer": "1.5 a placeholder to hold information used in the program... for example: int can hold: 1, 2, 3, 4, 68, 72, 256, etc. float can hold: 1.54, 55.55, 1.24, 5.657, 8.8123, et. char can hold: A, B, C, D, E, F, !, 4, 5, 6, P, etc.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.125
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_19",
        "student_answer": "1.5 a stored value used by the program",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.85
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_20",
        "student_answer": "1.5 A way to store different values into the program, such as numbers, words, letters, etc.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.125
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_21",
        "student_answer": "1.5 An object with a location in memory where value can be stored",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.875
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_22",
        "student_answer": "1.5 location in memory where a value can be stored",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_23",
        "student_answer": "1.5 a variable is an object where data is stored.",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.1
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_24",
        "student_answer": "1.5 Location in memory where a value can be stored.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_25",
        "student_answer": "1.5 it is a location in memory where value can be stored",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.95
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_26",
        "student_answer": "1.5 A variable is the location in a computer's memory where a value can be stored for use by a program.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_27",
        "student_answer": "1.5 A variable is a location in a computers memory where a value can be stored for use by a program.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_28",
        "student_answer": "1.5 a location in memory where data can be stored and retrieved",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "1.5 What is a variable?",
        "student_id": "student_29",
        "student_answer": "1.5 Is a method or identifier I would say, we use to bind a data object to memory location; which is then stored in a location that can be accessed when and manipulated later when the variable name is called.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.25
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_1",
        "student_answer": "1.6 They can be declared right before they are used, but it is a good practice to declare them at the beginning of the program and label what they are food.",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 1.25
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_2",
        "student_answer": "1.6 In the Function main() before using the variable.",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.0
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_3",
        "student_answer": "1.6 Local variables are declared inside the method or function they will be used in at the beginning of the method. Global variables are declared outside of any function or method, generally before functions are defined.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_4",
        "student_answer": "1.6 Variables are declared where ever it is defined either inside a block locally or outside a block globally.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 4.5
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_5",
        "student_answer": "1.6 Variables are declared before they are actually used. They can be declared before main() to use globally",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.5
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_6",
        "student_answer": "1.6 For good programing practice they should be declared before main(), but should at least be declared before they are used.",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 2.0
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_7",
        "student_answer": "1.6 They can be declared globally just before the main method (but also outside of it)... or variables can be subject to only the method they're scoped within, but would still be declared at the beginning of that method (but inside of it).",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.75
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_8",
        "student_answer": "1.6 local variables are declared inside the method while global variables are declared in the body.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_9",
        "student_answer": "1.6 -Any where in the main function.",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 1.5
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_10",
        "student_answer": "1.6 Globally for an entire program, and locally for individual functions (including FOR statements)",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 4.5
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_11",
        "student_answer": "1.6 They are usually declared at the beginning before they can be used in the program. They always contain a name and a data type.",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.5
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_12",
        "student_answer": "1.6 Inside the method.",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 2.25
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_13",
        "student_answer": "1.6 at the top",
        "human_scores": [
            1.5,
            1.0,
            2.0
        ],
        "human_avg_score": 1.5,
        "procot_score": 0.0
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_14",
        "student_answer": "1.6 Global variables are declared in the body of the code. Local variables are declared in the function they are to be used (unless the function is being passed a variable). Variables should always be declared before use.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_15",
        "student_answer": "1.6 Variables are usually declared at the beginning of a module of C++ code.",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 1.5
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_16",
        "student_answer": "1.6 In the main function, usually at the top of code. They can be declared almost anywhere, but must be declared before the code can use or act upon them.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 3.0
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_17",
        "student_answer": "1.6 in the very beginning of the program. Before the main() starts.",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.75
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_18",
        "student_answer": "1.6 In the declaration of Functions, for statements, and while statements. in the body of If, For, while, do while, statements, in namespaces, headers, etc ( almost anywhere. ) anywhere in the program, as long as it is on it's own line.",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 3.25
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_19",
        "student_answer": "1.6 After declaration of the variable's data type.",
        "human_scores": [
            1.0,
            1.0,
            1.0
        ],
        "human_avg_score": 1.0,
        "procot_score": 0.5
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_20",
        "student_answer": "1.6 anywhere in the code, can be at the top, or in the middle of the code, or anywhere.",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.5
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_21",
        "student_answer": "1.6 Before they are used.",
        "human_scores": [
            2.0,
            2.0,
            2.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.5
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_22",
        "student_answer": "1.6 Anywhere in the same scope before they are used",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 3.0
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_23",
        "student_answer": "1.6 variables can be declared in classes and methods.",
        "human_scores": [
            2.5,
            1.0,
            4.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 1.0
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_24",
        "student_answer": "1.6 inside the function scope and outside of the function scope in case of global variables",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.25
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_25",
        "student_answer": "1.6 global variables are declared in the main function local variables are declared in any other function",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.5
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_26",
        "student_answer": "1.6 Variables are usually declared at the very beginning of a C++ program, but can be declared any in the program as long as they appear before they are called upon.",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 3.75
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_27",
        "student_answer": "1.6 Variables are declared in the main function, before any operation is attempted with the variables.",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 2.0
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_28",
        "student_answer": "1.6 anywhere, but where you declare them depends on where you want them to be accessible (their scope)",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 4.0
    },
    {
        "question": "1.6 Where are variables declared in a C++ program?",
        "student_id": "student_29",
        "student_answer": "1.6 It depends if it's a global then they have to be declared out side the source code to be used in every scope however a local variable is one declared in a local function etc. which obviously doesn't need to be declared outside the variable seeing how it is used for the function or block its being called for.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.75
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_1",
        "student_answer": "1.7 \"The \"do\" statement first evaluates the condition and then executes the lines of code in the statement 0 or more times. The \"do while\" statement executes the lines of code and then it evaluates the condition. \"",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.5
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_2",
        "student_answer": "1.7 do...while statements evaluate whether or not to loop after running the block contained within it at least once. So the main differance is that while statements have a possibility of never being used. Do ... while statements on the other hand are always run at least once before evaluating whether to run again.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_3",
        "student_answer": "1.7 The main difference between a while and a do...while loop is that the do...while loop always cycles through the loop at least once, but the while loop does not always do so.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_4",
        "student_answer": "1.7 While loop used to execute a block of code as long as some condition is true. A do...while loop used to execute a block of code as long as some condition is satisfied. The difference between while and do...while is while loop tests its condition before the execution of its contents and the do...while loop tests its condition after the execution of its contents at least once.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_5",
        "student_answer": "1.7 The termination condition of a do...while statement is usually at the end of the loop so it will run at least once. As for the while statement, if the condition is false to begin with, then the loop will never run.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_6",
        "student_answer": "1.7 A while loop will check the statement to make sure it is true before executing. A do while loop will execute before checking the statement to see if it should run again.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_7",
        "student_answer": "1.7 A while statement will test the condition of the while loop FIRST - there is a chance the loop will never run. A do...while loop will ALWAYS run once, and then the while test will determine if it will run again.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_8",
        "student_answer": "1.7 a do while loop always executes once. A while loop's conditional statement has to be true for it to run.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_9",
        "student_answer": "1.7 -WHILE statement --The condition is checked for validity, then is repeated until the conditon is false. -Do...WHILE statement--The code is performed at least once then checked for valid condition. Will continue to",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_10",
        "student_answer": "1.7 while statements will evaluate the statement BEFORE executing a cycle of the loop, including the first cycle, meaning that a while loop will not always execute. A do...while will run evaluate the statement AFTER running through a cycle of the loop, ensuring that the loop always executes at least one time.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_11",
        "student_answer": "1.7 The main difference between a do and a do...while statement is in a do...while statement is the statements in a do block are always executed atleast once. The while statement will only execute if its condition is true.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_12",
        "student_answer": "1.7 The loop of a do...while statement always executes once.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 4.25
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_13",
        "student_answer": "1.7 a while statement will only process if the statement is met, while a do...while will always process once, then only continue if the statement is met.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_14",
        "student_answer": "1.7 Do ...while runs the embedded code at least once, the do command does not necessarily",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.5
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_15",
        "student_answer": "1.7 While tests for true first before running, do...while runs once first before checking.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.75
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_16",
        "student_answer": "1.7 A do...while statement's body always executes at least once. Where as a while statement will not execute at all unless the condition for the while is true.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_17",
        "student_answer": "1.7 The statements within the block of the do while loop will always be executed at least once regardless of the conditions. Whereas the while loops may never be executed if the conditions are not met.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_18",
        "student_answer": "1.7 a do... while loop will always run through once, while an while loop performs a test before running through the loop.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_19",
        "student_answer": "1.7 A while statement tests the condition before it can start. A do...while statement loops through once before the condition is tested.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_20",
        "student_answer": "1.7 A while loop terminates at the beginning of the loop, a do/while terminates at the end of the loop.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 3.5
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_21",
        "student_answer": "1.7 the loop body always executes at least once",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 4.5
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_22",
        "student_answer": "1.7 While loop evaluates its expression at the top of its loop and decides if it needs to execute, and the do-while always executes at least once and then evaluates its expression at the bottom of its loop.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_23",
        "student_answer": "1.7 A do...while statement will always execute the \"do\" piece of code at least once before checking the condition. A while statement will always check the condition first.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_24",
        "student_answer": "1.7 A do-while passes atleast 1 time before checking the condition, however, a while would fail to enter the loop if the condition fails in its first place.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_25",
        "student_answer": "1.7 a while loop checks if the condition is true or not first, if it was true, it excutes the statement. a do.. while loop executes the statement before it checks the condition. if the condition was true it would excute the statement again. so a do...while loop would excute the statement atleast once.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_26",
        "student_answer": "1.7 NO ANSWER",
        "human_scores": [
            0.0,
            0.0,
            0.0
        ],
        "human_avg_score": 0.0,
        "procot_score": 0.0
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_27",
        "student_answer": "1.7 A do...while loop will always execute atleast once, a while loop may never execute depending on teh conditions.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_28",
        "student_answer": "1.7 a while loop is pre-check (it checks the condition statement before it executes the code within the while block) a do while loop is post-check (it checks the condition AFTER the block executes, it runs at least once no matter what the condition statement is)",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "1.7 What is the main difference between a while and a do...while statement?",
        "student_id": "student_29",
        "student_answer": "1.7 )) What is the main difference between a while and a do...while statement? The do while construct consists of a block of code and a condition. First, the code within the block is executed, and then the condition is evaluated, this is done until it is proven false. The difference between the While loop is it tests the condition before the code within the block is executed.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 0.0
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_1",
        "student_answer": "10.1 A hierarchy of nodes that are sorted in a particular order. Each node has a ancestor (except for the root) and children (except for the leaves).",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.0
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_2",
        "student_answer": "10.1 A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_3",
        "student_answer": "10.1 A tree is a finite set of one or more nodes such that: there is a specially designated node called the root.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.5
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_4",
        "student_answer": "10.1 A connected, undirected graph without cycles.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 0.0
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_5",
        "student_answer": "10.1 A data structure that contains a root, internal nodes and external nodes. Each node references another node by means of pointers (pass-by-reference). The root is the \"base\" of the tree, it has no parents. A \"leaf\" is a node at the end of the tree which points to NULL.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 0.5
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_6",
        "student_answer": "10.1 a tree is a series of nodes where each node has links to other nodes.",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.5
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_7",
        "student_answer": "10.1 an infinite set of nodes that have a root and descendants, and each addition is a leaf.",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.0
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_8",
        "student_answer": "10.1 A set of one or more nodes that are hierarchically organized, with one special \"root\" node.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.0
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_9",
        "student_answer": "10.1 A tree is a finite set of one or more nodes such that there is a specially designated node called the root.",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.0
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_10",
        "student_answer": "10.1 one or more nodes in a hierarchy starting with the root and branching off like a tree to subtrees",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_11",
        "student_answer": "10.1 A tree is a data structure where nodes are linked to each other in a hierarchical manner.",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.0
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_12",
        "student_answer": "10.1 a grouping of data in a parent to child structure",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.5
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_13",
        "student_answer": "10.1 It is a list of numbers in a list made by comparing values of nodes already in the tree and adding to the appropriate spot. Its a list made up of nodes with left and right pointers.",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.5
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_14",
        "student_answer": "10.1 A tree is a branched data structure with nodes, and leaves... a special node called root has no parent node, but however like all other nodes can and does have 2 nodes that it links to, namely one on the right, and one on the left.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.0
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_15",
        "student_answer": "10.1 It organizes data in a nonlinear, hierarchical form, where items can have more than one successor. Partitioned into a root node and subsets are general subtrees of the root.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_16",
        "student_answer": "10.1 A tree is a finite set of one or more nodes such that there is a specially designated node called the root. The remaining nodes are partitioned into n>=0 disjoint sets T the n plus 1, where each element set is a tree.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_17",
        "student_answer": "10.1 A finite set of nodes that starts with the root and terminates with leaves.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 0.75
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_18",
        "student_answer": "10.1 a set of data arranged with pointers. each element can have many pointers, but no two pointers point to the same element",
        "human_scores": [
            2.5,
            1.0,
            4.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.75
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_19",
        "student_answer": "10.1 A Tree is a data structure with one or more data nodes, each of which contains some data. Each node itself can have a number of attached child nodes, creating the branched structure Trees are named for.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 0.5
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_20",
        "student_answer": "10.1 a finite collection of nodes, where it starts with an element called the root, which has children, and its children have children until you get to the leaves which are the last elements and have to children",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.25
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_21",
        "student_answer": "10.1 A nonlinear, two-dimensional data structure.",
        "human_scores": [
            2.0,
            0.0,
            4.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.0
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_22",
        "student_answer": "10.1 a finite set of one or more nodes such that there is a root node and all other nodes are split into trees of lesser value than the root",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 3.0
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_23",
        "student_answer": "10.1 A finite number of nodes such that there is one root node, each node has a certain number of children nodes, and each child is also a tree",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "10.1 What is a tree?",
        "student_id": "student_24",
        "student_answer": "10.1 A type of data structure in which each element is attached to one or more elements directly beneath it.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.0
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_1",
        "student_answer": "10.3 A leaf is a child of a parent node that has no children nodes of its own.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_2",
        "student_answer": "10.3 A leaf is a node with no children.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_3",
        "student_answer": "10.3 A node with no children.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_4",
        "student_answer": "10.3 A tree node with no children.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_5",
        "student_answer": "10.3 And end point of the tree... a node that does not have any children.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_6",
        "student_answer": "10.3 a node with no children.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_7",
        "student_answer": "10.3 A new item to the tree--a child",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.75
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_8",
        "student_answer": "10.3 A leaf is a node with children, it is a terminating node.",
        "human_scores": [
            2.0,
            0.0,
            4.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 1.5
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_9",
        "student_answer": "10.3 The node with degree 0.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.5
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_10",
        "student_answer": "10.3 the node with degree 0",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 0.5
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_11",
        "student_answer": "10.3 a leaf is a node with no children",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_12",
        "student_answer": "10.3 the last child on any branch",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.5
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_13",
        "student_answer": "10.3 The last value in the tree. A value with no children attatched.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_14",
        "student_answer": "10.3 a node with no children.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_15",
        "student_answer": "10.3 A node with no children.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_16",
        "student_answer": "10.3 A leaf is a node with no children",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_17",
        "student_answer": "10.3 a node with degree 0. last node in the tree and furtherest away from the root.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.75
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_18",
        "student_answer": "10.3 an endpoint on a tree that contains no pointers or pointers that are set to null",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 4.5
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_19",
        "student_answer": "10.3 A leaf is a node with no children.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_20",
        "student_answer": "10.3 an element in a tree that has no children",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_21",
        "student_answer": "10.3 A node with no children.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_22",
        "student_answer": "10.3 a leaf is a node that has no children nodes",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_23",
        "student_answer": "10.3 a leaf is a node with no children",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.3 What is a leaf?",
        "student_id": "student_24",
        "student_answer": "10.3 The elements at the very bottom of an inverted tree (that is, those that have no elements below them) are called leaves.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_1",
        "student_answer": "10.4 A tree data structure in which each done has at most two children, typical called left and right nodes. The right node is usually greater than the left node and the parent node.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.5
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_2",
        "student_answer": "10.4 A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node can have no more than two children, a right and a left child.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_3",
        "student_answer": "10.4 A set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node has at most two children, the left child and the right child.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_4",
        "student_answer": "10.4 A set of zero or more nodes, partitioned into a root node and two possibly empty sets that are binary trees. Thus, each node in a binary tree has at most two children, the left child and the right child.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_5",
        "student_answer": "10.4 A tree in which each parent has a maximum of 2 children.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_6",
        "student_answer": "10.4 a tree where each node has at most 2 children.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_7",
        "student_answer": "10.4 a tree with up to two children or a right subtree and/or a left subtree",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_8",
        "student_answer": "10.4 A binary tree is a tree in which all nodes have a maximum of two degrees, or can only have two children each.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_9",
        "student_answer": "10.4 a binary tree is a tree data structure in which each node has at most two children.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_10",
        "student_answer": "10.4 a tree with only 2 joints, left and right",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.75
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_11",
        "student_answer": "10.4 A binary search tree is a tree that also has the condition that each node may have at maximum 2 children",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.0
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_12",
        "student_answer": "10.4 a tree where each parent can have at max two children.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.335
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_13",
        "student_answer": "10.4 a list of numbers that are ordered compared to how they compare to the other numbers already added in the tree",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.0
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_14",
        "student_answer": "10.4 a tree where each node can have at most 2 children.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_15",
        "student_answer": "10.4 Starting at the root node, it branches off into one or two subsets that are binary subtrees of the root. Each node has at most two children, the left child and the right child.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_16",
        "student_answer": "10.4 A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node has at most two children, the left child and the right child.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_17",
        "student_answer": "10.4 a tree that has a maximum of 2 children per node",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_18",
        "student_answer": "10.4 a tree with elements that can contain at most two pointers",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_19",
        "student_answer": "10.4 A binary tree can have only two children for each node.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_20",
        "student_answer": "10.4 a tree where every parent has only two children",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.0
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_21",
        "student_answer": "10.4 A tree where every node has no more than two children",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_22",
        "student_answer": "10.4 a binary tree is a special search tree where each node has either 2, 1, or 0 children",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.25
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_23",
        "student_answer": "10.4 a binary tree is a special type of tree where each node can only have at maximum 2 children",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "10.4 What is a binary tree?",
        "student_id": "student_24",
        "student_answer": "10.4 A binary tree is a special type of inverted tree in which each element has only two branches below it.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.5
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_1",
        "student_answer": "10.5 A tree data structure where each node has a value, where the total order is defined on these values. the left subtree contains only values less than the parent node, and vice versa for the right subtree.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_2",
        "student_answer": "10.5 A binary search tree is a binary tree where the value in any node 'n' is greater than the value in every node in n's left subtree but less than every node in n's right subtree.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.25
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_3",
        "student_answer": "10.5 A binary tree where the value in any node n is greater than the value in every node in n's left subtree, but less than the value of every node in n's right subtree.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_4",
        "student_answer": "10.5 A binary tree where the search key in any node n is greater than the search key in any node in n's left subtree, but less than the search key in any node in n's right subtree.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_5",
        "student_answer": "10.5 A tree which is split based on values. This makes it very easy to search. One can compare the desired value to the root, and if the root is greater than, we search the left side of the tree, if it is less than, we search the right side... and do the same thing recursively.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.0
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_6",
        "student_answer": "10.5 a tree where each node has at most two nodes and the node on the left is less than the root and the node on the right is greater than the root.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 4.0
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_7",
        "student_answer": "10.5 a special binary tree that has a rule that all the subtrees on the right are smaller than the node value and all the subtrees on the left are larger than the node value",
        "human_scores": [
            4.0,
            5.0,
            3.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 0.0
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_8",
        "student_answer": "10.5 Binary search trees are similar to binary trees, but have been implemented to organize data in a specific way for later searching.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 0.5
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_9",
        "student_answer": "10.5 it is a binary tree where each node has a value, a total order is defined on these values, the left subtree of a node contains only values less than the node's value, and the right subtree of a node contains only values greater than or equal to the node's value.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_10",
        "student_answer": "10.5 A binary tree with the data organized in a specific arangment",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.25
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_11",
        "student_answer": "10.5 A binary search tree is a tree that also has the condition that each node may have at maximum 2 children and where the input data is compared to the data in the tree starting with the root. If the value is smaller than the root it traverses left, if it is larger it traverses right until it becomes a leaf.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.25
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_12",
        "student_answer": "10.5 a binary tree in which the data is in order from left to right.",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.25
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_13",
        "student_answer": "10.5 a tree that is set up so that it can be easily searched for numbers based on the location compared to the previous nodes.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.5
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_14",
        "student_answer": "10.5 a binary tree where the children are ordered such that the right side is greater than the current node, and the left is less than or equal the current node.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_15",
        "student_answer": "10.5 A binary tree where the value in any node n is greater than the value in every node n's left subtree, but less than every value in n's right subtree.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.75
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_16",
        "student_answer": "10.5 A binary search tree is a finite set of nodes that is either empty or consits of a root and two disjoint binary trees call the left and right subtrees.",
        "human_scores": [
            2.5,
            1.0,
            4.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.0
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_17",
        "student_answer": "10.5 it is similar to a binary tree. The keys in a nonempty left subtree (right subtree) are smaller (larger) than the key in the root of subtree. the values in all nodes in the left subtree of a node are less than the node value the values in all nodes in the right subtree of a node are greater than the node values",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_18",
        "student_answer": "10.5 a set of numbers arranged by links. each node can contain two pointers to other elements. each node to the left of the parent is smaller and each node to the right is larger. recursive implementation implies that if traversed in order, the output would be sorted",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 5.0
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_19",
        "student_answer": "10.5 A binary search tree is a special binary tree arranged such that every left child node contains a value less than its parent, and every right child node contains a value greater its parent.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_20",
        "student_answer": "10.5 a binary tree with a special organization of data. where the left child of the element is less than it, and the right child is larger than it.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_21",
        "student_answer": "10.5 A tree in which the smaller values are located on the left of a parent node and the larger values are located on the right of the parent node.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_22",
        "student_answer": "10.5 a binary search tree is a special tree in which each node has at most two children, labeled left child and right child",
        "human_scores": [
            2.5,
            1.0,
            4.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 1.0
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_23",
        "student_answer": "10.5 it is a binary tree where each node has a unique key, the left child of a node has only values less than that node, and the right child of each node has higher values than that node.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "10.5 What is a binary search tree?",
        "student_id": "student_24",
        "student_answer": "10.5 Binary search trees are a fundamental data structure used to construct more abstract data structures such as sets, multisets, and associative arrays.",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.0
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_1",
        "student_answer": "10.6 For every node in the binary tree we first visit its left sub-tree (if its there) and then visit the parent node itself, and then the right sub-tree (if its there).",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.75
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_2",
        "student_answer": "10.6 The inorder traversal of a binary tree visits the node of a binary tree in order according to their data values.",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.0
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_3",
        "student_answer": "10.6 Traverses the binary tree in inorder. It lets you visit the nodes in order according to their data values.",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.5
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_4",
        "student_answer": "10.6 Its used to visit nodes of a binary search tree in a search key order.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.0
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_5",
        "student_answer": "10.6 (Left side of tree) (Root) (Right side of tree)",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_6",
        "student_answer": "10.6 printing a tree in order from least to greatest. This done by going as far left down the tree as possible and printing the parent and then right tree. Then move up the tree.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.25
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_7",
        "student_answer": "10.6 The in order is to go from left,root,right",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_8",
        "student_answer": "10.6 Inorder traversal of a binary tree will retrieve start at the furthest left hand leaf and checks it, it's parent, and it's right side sibling, then it goes up a level and repeats until it gets to the root.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.5
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_9",
        "student_answer": "10.6 traverse the left subtree. visit the root. traverse the right subtree.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.75
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_10",
        "student_answer": "10.6 postorder",
        "human_scores": [
            1.5,
            0.0,
            3.0
        ],
        "human_avg_score": 1.5,
        "procot_score": 0.0
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_11",
        "student_answer": "10.6 in order starts with the root then does right child then left child recursively",
        "human_scores": [
            1.5,
            0.0,
            3.0
        ],
        "human_avg_score": 1.5,
        "procot_score": 0.5
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_12",
        "student_answer": "10.6 Left Child -> Parent -> Right Child",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_13",
        "student_answer": "10.6 it goes from lowest to highest inside of the tree",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 1.0
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_14",
        "student_answer": "10.6 starting by displaying the node furthest to the right, then the node, then the node on the right, in recursive order.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 0.5
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_15",
        "student_answer": "10.6 It travels left to right",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.75
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_16",
        "student_answer": "10.6 void inorder(ptNode ptr) { if (ptr) { inorder (ptr-&gt;left); cout&lt;&lt;ptr-&gt;data; inorder(ptr-&gt;right); } }",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 0.5
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_17",
        "student_answer": "10.6 the root is in the middle. The left subtree is traversed first, then the root, and finally the right subtree.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_18",
        "student_answer": "10.6 a traversal that visits the left branch first, then the parent node, then the right branch, recursively.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.25
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_19",
        "student_answer": "10.6 Inorder traversal visits the left branch of a node (all the way to it's deepest left-most leaf) before visiting the node itself. After visiting the entire left branch and the node, it visits the node's right branch following the same pattern of left child, node, right child.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_20",
        "student_answer": "10.6 left middle right",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.25
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_21",
        "student_answer": "10.6 You traverse all the nodes to the left, then visit the root, then traverse all the nodes on the right.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.25
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_22",
        "student_answer": "10.6 you would go to the furthest down left most node, then to the root then to the right (if left and right exist) then you would return one node previous and do the same until you reached the root, then go to the furthest down left most node on the right side of the root and continue this process",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_23",
        "student_answer": "10.6 it means that you traverse one subtree of a node, then look at the node itself before traversing the other subtree of the node",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.75
    },
    {
        "question": "10.6 What is the inorder traversal of a binary tree?",
        "student_id": "student_24",
        "student_answer": "10.6 Level order traversal is a traversal method by which levels are visited successively starting with level 0 (the root node), and nodes are visited from left to right on each level, with Push and Pop methods.",
        "human_scores": [
            2.0,
            0.0,
            4.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.0
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_1",
        "student_answer": "10.7 This is on the runtime order of log(n) where n is the number of nodes in the binary tree.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_2",
        "student_answer": "10.7 In a binary search tree of size 'n' it takes log(n) comparisons to find a specified element.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_3",
        "student_answer": "10.7 n-1/2 is the algorithm to compare and find an element.",
        "human_scores": [
            2.0,
            0.0,
            4.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.0
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_4",
        "student_answer": "10.7 At most its equivalent to the height of the tree.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_5",
        "student_answer": "10.7 Log(n)",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_6",
        "student_answer": "10.7 O(log n)",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_7",
        "student_answer": "10.7 Depends on what half of the tree and the levels you have.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 3.25
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_8",
        "student_answer": "10.7 O(log n) in balanced trees",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_9",
        "student_answer": "10.7 n-1",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 1.5
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_10",
        "student_answer": "10.7 log(n)",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.25
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_11",
        "student_answer": "10.7 O(nlog(n))",
        "human_scores": [
            2.5,
            0.0,
            5.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.0
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_12",
        "student_answer": "10.7 nLog(n)",
        "human_scores": [
            2.0,
            0.0,
            4.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.5
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_13",
        "student_answer": "10.7 logn",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_14",
        "student_answer": "10.7 at the minimum log(n)/log(2), at the maximum N searches, where N is the number of nodes.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.0
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_15",
        "student_answer": "10.7 O(n)",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.0
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_16",
        "student_answer": "10.7 It takes at most 3 comparisons to find and element in a binary search tree",
        "human_scores": [
            1.5,
            0.0,
            3.0
        ],
        "human_avg_score": 1.5,
        "procot_score": 0.0
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_17",
        "student_answer": "10.7 log (n) where n equals the number of nodes.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.25
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_18",
        "student_answer": "10.7 it takes as many comparisons as the number of levels of the binary search tree. it only compares one number at each level",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_19",
        "student_answer": "10.7 At most it takes one less comparisons than the tree's height. In big-O notation it takes O(log n) comparisons if the tree is balanced.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_20",
        "student_answer": "10.7 O(log n)",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_21",
        "student_answer": "10.7 log n comparisons",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_22",
        "student_answer": "10.7 (n^k)-1 where k is the height of the tree",
        "human_scores": [
            1.5,
            0.0,
            3.0
        ],
        "human_avg_score": 1.5,
        "procot_score": 0.0
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_23",
        "student_answer": "10.7 it takes h comparisons, where h is the height of the tree",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "10.7 How many comparisons does it take to find an element in a binary search tree?",
        "student_id": "student_24",
        "student_answer": "10.7 2 way key comparison",
        "human_scores": [
            1.0,
            0.0,
            2.0
        ],
        "human_avg_score": 1.0,
        "procot_score": 0.5
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_1",
        "student_answer": "2.1 For us it is usually a set, get, and displayMessge or other messages that tell you what properties a class has but does not reveal its implementations. You could have anything you want in your own class definition.",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 2.25
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_2",
        "student_answer": "2.1 The attributes of said class. Also whether or not it is a subclass. Also whether it is public private or protected.",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.375
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_3",
        "student_answer": "2.1 Information telling the compiler what data members and member functions belong to the class.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_4",
        "student_answer": "2.1 Since class is user defined, the body of the declaration can contain members, that can be either data or function declarations, and optionally access specifiers. Example for specifiers would be public, private, and protected. There is the keyword Class and the Class body is enclosed with brackets ({}).",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.625
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_5",
        "student_answer": "2.1 An object and data.",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.75
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_6",
        "student_answer": "2.1 It's specific class name, includes only information defined by that class... implementation details... etc.",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.0
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_7",
        "student_answer": "2.1 data members and member functions.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_8",
        "student_answer": "2.1 A class definition usually contains the function and its data members",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.875
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_9",
        "student_answer": "2.1 Data members and member functions",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_10",
        "student_answer": "2.1 member functions",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.25
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_11",
        "student_answer": "2.1 Member functions and data members belonging to the class.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_12",
        "student_answer": "2.1 a public and private area that includes the functions and variables that are used in the class",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.65
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_13",
        "student_answer": "2.1 the keyword class followed by they class name, on the inside you declare public and private declarations of your class",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.25
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_14",
        "student_answer": "2.1 A class definition typically includes function definitions.",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.25
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_15",
        "student_answer": "2.1 It begins with Class, followed by the class name, then usually a constructor, data members and member functions that delineates the class is included in any class's definition.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_16",
        "student_answer": "2.1 the data and methods",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.75
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_17",
        "student_answer": "2.1 A constructor, functions, and variables that are accessible to by that class, and possibly other classes depending on how they are done.",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.25
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_18",
        "student_answer": "2.1 Member functions and data members.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_19",
        "student_answer": "2.1 public section and private section, and there must be a semicolon to set the end",
        "human_scores": [
            2.5,
            1.0,
            4.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.5
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_20",
        "student_answer": "2.1 member funtions and data members",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_21",
        "student_answer": "2.1 Data members and Member functions",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_22",
        "student_answer": "2.1 data members and member functions",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_23",
        "student_answer": "2.1 the class name and its public data types such as constructors, methods, functions.",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.9
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_24",
        "student_answer": "2.1 a constructor and several data members, and at least one public data member or method",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.5
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_25",
        "student_answer": "2.1 class name, two curly prenthesis, public and private",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.0
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_26",
        "student_answer": "2.1 data members and member functions",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_27",
        "student_answer": "2.1 Data and functions",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.25
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_28",
        "student_answer": "2.1 functions and data members that belong to the class",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_29",
        "student_answer": "2.1 class variables, function definitions for the class",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "2.1 What is typically included in a class definition?",
        "student_id": "student_30",
        "student_answer": "2.1 A class is an expanded concept of a data structure, it holds both the data and the functions being executed",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.2
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_1",
        "student_answer": "2.2 Data members are the data components of a particular class. A member function are the functioning components of the class.",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.5
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_2",
        "student_answer": "2.2 A field variable is a variable that is declared as a member of a class. A local variable is avariable that isdeclared local to a method.",
        "human_scores": [
            2.5,
            1.0,
            4.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 1.0
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_3",
        "student_answer": "2.2 Data members are declared inside the class, but outside of any member functions. Unlike with local variables, each object of the class keeps its own copy of the data members stored in memory.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.5
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_4",
        "student_answer": "2.2 Data member are variables that represent an attribute in a class definition. Local variables declared in a function body cannot be used outside of that function body. When a function terminates the values of its local variables are lost.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.0
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_5",
        "student_answer": "2.2 A local variable cannot be accessed outside the function in which it is declared. Data members normally are private. Variables of functions declared private are accessible only to member functions of the class in which they are declared.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_6",
        "student_answer": "2.2 A data member is part of a C++ class or structure that stores data of a certain type... A local variable inside a member function is only available inside that function, and can be used to derive a desired outcome.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.25
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_7",
        "student_answer": "2.2 A local variable can only be accessed within the scope of its declaration.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.0
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_8",
        "student_answer": "2.2 Data members are the atributes of the function and can be used outside the function. Local variable can not be used outside the function and the value is lost after the function terminates.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.0
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_9",
        "student_answer": "2.2 data members are permanent attributes of the class, local variables inside a member function are lost when the scope of the member function ends.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.0
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_10",
        "student_answer": "2.2 data members are declared in a class definition but outside the bodies of a class's member-function definitions. Local variables are declared in a function definition's body",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.0
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_11",
        "student_answer": "2.2 A data member is globally accessible, while a local variable is only accessible inside the member function.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.0
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_12",
        "student_answer": "2.2 A variable inside a member function can only be accessed inside that member and a data member can be accessed throughought the program.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_13",
        "student_answer": "2.2 Local variables are used only within the scope of its declaration",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.45
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_14",
        "student_answer": "2.2 A data member is a more general term describing all objects instantiated within a member function. \"Local\" in local variables refers more to the scope of a variable, which may be located in anything from a control structure to a class. Local variables whose scope are in a member function are the same as data members of member functions.",
        "human_scores": [
            2.0,
            0.0,
            4.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.5
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_15",
        "student_answer": "2.2 A data member exists permanently in that program's memory as long as it's run. A local variable inside a member function is temporal and only used to operate in the function and exists as long as the function is run.",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.0
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_16",
        "student_answer": "2.2 local variables can only be used within the function, where as data members can be set to public access and can be used throughout",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_17",
        "student_answer": "2.2 The local variable is lost once it exits the block of code, while the data member is not.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.875
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_18",
        "student_answer": "2.2 Every member function can access and modify a data member. A local variable can only be used from the line of declaration to the next closing } before it is lost from memory.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 4.0
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_19",
        "student_answer": "2.2 data member is accessible to all functions in the class, where local variable is only available to the member function and value is lost when function closes",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_20",
        "student_answer": "2.2 Data members are variables that are declared inside the class definition but outside of the bodies of the class member functions. Local variables can only be used within the function declaration.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.75
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_21",
        "student_answer": "2.2 The data member can be accessed outside of the class, whereas the local variable cannot.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.0
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_22",
        "student_answer": "2.2 Local variables cannot be used outside of that function body. When a function terminates the values of its local variables are lost. Where as data members are variables in a class definition, and they exist throughout the life of the object.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 1.75
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_23",
        "student_answer": "2.2 a local variable in a member function has to be static. a data member can change its value freely.",
        "human_scores": [
            2.0,
            0.0,
            4.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.0
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_24",
        "student_answer": "2.2 a local variable is only useable within the function it is defined, whereas a data member is available to any method within its class",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_25",
        "student_answer": "2.2 Variable declared in a function defination's body cannot be used outside of that function. Data members accessible only to member function of that class.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_26",
        "student_answer": "2.2 data members local variables are declared in a function definition's body. they Cannot be used outside of that function body. When a function terminates, the values of its local variables are lost.",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.5
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_27",
        "student_answer": "2.2 local variable is only available in the function.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.0
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_28",
        "student_answer": "2.2 local variables are accessed inside member functions only while data members can be accessed throughout the class",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.5
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_29",
        "student_answer": "2.2 A data member is accessible anywhere in the class, while i local variable in a member function is only accessible in that particular function, and is freed after the function exits.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "2.2 What is the difference between a data member and a local variable inside a member function?",
        "student_id": "student_30",
        "student_answer": "2.2 a Data member is encapsulated within a class or object, it is static and can be shared by all instances of that class. however local variable's are only used from the function or block in which it is declared and not the whole class. other wise they would be called global variables.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.65
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_1",
        "student_answer": "2.3 A constructor initializes an object or objects of a class. A function of a class performs a task such as display a line of text or do some kind of mathematical operations.",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 1.25
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_2",
        "student_answer": "2.3 all constructors are functions but not all functions are constructors. Also functions can have nearly infinite purposes, while constructors always create an instance of whichever class you are using. You can change how a constructor does something but not what it does. With functions you can change not only the how but also the what.",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.25
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_3",
        "student_answer": "2.3 Unlike regular functions, constructors are only used to initialize an object's data when it is created. Constructors must also be given the same name as the class and cannot return any values.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.125
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_4",
        "student_answer": "2.3 A constructor typically used to intialize data members and allocate resources, for instance memory, files, etc. Also a constructor cannot return values. Functions are operations that maybe globally defined.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.5
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_5",
        "student_answer": "2.3 Constructors cannot return values, so they cannot specify a return type. Normally, constructors are declared public.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.25
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_6",
        "student_answer": "2.3 A constructor is a method that starts new instances of a class. (Example: Employee employee1(parameters) starts a new instance of object of type Employee). A function is simply a module w/in a program that completes its single desired task.",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.9
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_7",
        "student_answer": "2.3 A constructor is called whenever a new object of that class is made.",
        "human_scores": [
            3.5,
            4.0,
            3.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.25
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_8",
        "student_answer": "2.3 A constructor does not return any date and has no return type. Functions can return date or not return data can have a return type.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.0
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_9",
        "student_answer": "2.3 A constructor is automatically called whenever an instance of a class is created, a function must be explicitly called by the user.",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.75
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_10",
        "student_answer": "2.3 constructors cannot return values, so they cannot specify a return type like functions can.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.75
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_11",
        "student_answer": "2.3 A constructor is a function used to initialize an object's data when it is created.",
        "human_scores": [
            3.5,
            4.0,
            3.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.25
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_12",
        "student_answer": "2.3 a constructor initialises everything so that nothing is left empty or with random varioubles and a function modifies those variables with data.",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 1.75
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_13",
        "student_answer": "2.3 A constructor initialized values at the execution of its instantiation. It provides default values.",
        "human_scores": [
            3.5,
            4.0,
            3.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.0
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_14",
        "student_answer": "2.3 A constructor sets up the default values of variables when an object is instantiated, whereas a function allows interaction with that object.",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.5
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_15",
        "student_answer": "2.3 A constructor is used to create an object that can be employed in the main function of a program. This may or may not execute code along with it. A function is a set of code that executes when called, but does not create a new object.",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.0
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_16",
        "student_answer": "2.3 a constructor initializes data members but the functions actually perform tasks. Constructors cant return values either.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.5
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_17",
        "student_answer": "2.3 a constructor does not need a type, and it is used to initialize the variables.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.0
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_18",
        "student_answer": "2.3 Constructors don't have a return type.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.5
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_19",
        "student_answer": "2.3 constructor creates the class object into memory where functions perform actions against that object",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.75
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_20",
        "student_answer": "2.3 constructors cannot return values",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.5
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_21",
        "student_answer": "2.3 A constructor initializes values and a function usual performs some sort of operation.",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 1.6
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_22",
        "student_answer": "2.3 A constructor is a function used to initialize an object's data when it is created. It's call is made implicitly when the object is created and must be defined with the same name as the class. Constructor also cannot return a value like a function can.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.6
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_23",
        "student_answer": "2.3 A constructor is used to create an instance of a class and has the same name as that class. A function cannot have the same name as a class and computes data.",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.0
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_24",
        "student_answer": "2.3 a constructor is a function that initializes a class instance, a function performs whatever task it is written for",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.75
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_25",
        "student_answer": "2.3 A constructor cannot return values, not even void, but function get a return value.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 3.5
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_26",
        "student_answer": "2.3 a constructor cannot return values, its not even void. it is used to initialize an object's data when it is created. whereas, a function is created to do a specific task, and it can return values.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_27",
        "student_answer": "2.3 A constructor initializes an object. A function is part of an object.",
        "human_scores": [
            2.5,
            1.0,
            4.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 1.5
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_28",
        "student_answer": "2.3 constructors initialize the data that is then used in the calculations of a function",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 1.0
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_29",
        "student_answer": "2.3 a constructor is called when the class is created, a function can be called any time.",
        "human_scores": [
            3.5,
            4.0,
            3.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.75
    },
    {
        "question": "2.3 What is the difference between a constructor and a function?",
        "student_id": "student_30",
        "student_answer": "2.3 constructor is a special block of statements called when an object is created, either when it is declared statically or constructed on the stack. However a function is a portion of code within a larger program, which performs a specific task and independent to the rest of the code.",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.0
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_1",
        "student_answer": "2.4 The compiler creates a default constructor when we do not define one in our class file",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_2",
        "student_answer": "2.4 during compilation",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 0.5
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_3",
        "student_answer": "2.4 When the class does not explicitly include a constructor.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_4",
        "student_answer": "2.4 When no parameters are set is when a default constructor is used.",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.25
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_5",
        "student_answer": "2.4 When a class does not explicitly include a constructor.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_6",
        "student_answer": "2.4 When there are no arguments passed.",
        "human_scores": [
            1.5,
            1.0,
            2.0
        ],
        "human_avg_score": 1.5,
        "procot_score": 0.0
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_7",
        "student_answer": "2.4 when there is not one already for a specific class",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.25
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_8",
        "student_answer": "2.4 When it the programs compiles",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 0.0
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_9",
        "student_answer": "2.4 when a constructor is not provided by the programmer of the class",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_10",
        "student_answer": "2.4 In any class that does not explicitly include a constructor.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_11",
        "student_answer": "2.4 Before the main function of the code.",
        "human_scores": [
            1.0,
            0.0,
            2.0
        ],
        "human_avg_score": 1.0,
        "procot_score": 0.0
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_12",
        "student_answer": "2.4 whenevery you dont specifiy your own",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.0
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_13",
        "student_answer": "2.4 When non are provided",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.25
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_14",
        "student_answer": "2.4 C++ will create a default constructor when no other constructor is present.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.25
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_15",
        "student_answer": "2.4 When no constructor was specified in the constructor's class, but the class is instantiated in a program.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.0
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_16",
        "student_answer": "2.4 When no constructor exists when one is needed, a parameterless default constructor is declared.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_17",
        "student_answer": "2.4 The Compiler creates this automatically for you, unless you specifically create one.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_18",
        "student_answer": "2.4 In any class that doesn't explicitly include a constructor.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_19",
        "student_answer": "2.4 when no user-defined constructor exists",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_20",
        "student_answer": "2.4 If a class does not explicitly include a constructor, the compiler creates one.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.25
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_21",
        "student_answer": "2.4 When you do not provide your own constructor.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_22",
        "student_answer": "2.4 When a class does not explicitly include a constructor.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_23",
        "student_answer": "2.4 C++ creates a default constructor during compilation if one is not provided.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.25
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_24",
        "student_answer": "2.4 when a class does not explicitly include a constructor",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_25",
        "student_answer": "2.4 The compiler will provide one when class does not explictly include a consructor.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.25
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_26",
        "student_answer": "2.4 when the programmer does not explicitly include a constructor",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_27",
        "student_answer": "2.4 When one is not explicitly stated.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_28",
        "student_answer": "2.4 when one is not explicitly included by a class",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_29",
        "student_answer": "2.4 When you dont specify any constructors.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "2.4 When does C++ create a default constructor?",
        "student_id": "student_30",
        "student_answer": "2.4 at the very beginning when you run a complier, matter a fact in C++ it generates its own default constructor for the class provided if no other constructors have been provided by user",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_1",
        "student_answer": "2.5 Just one per class.",
        "human_scores": [
            0.0,
            0.0,
            0.0
        ],
        "human_avg_score": 0.0,
        "procot_score": 0.0
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_2",
        "student_answer": "2.5 As many as you want so long as they have different parameters.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_3",
        "student_answer": "2.5 There is no limit to the number of constructors in a class because like functions, constructors can be overloaded.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_4",
        "student_answer": "2.5 It depends what type of class is being defined. Typically you would have a constructor call for each object.",
        "human_scores": [
            1.5,
            1.0,
            2.0
        ],
        "human_avg_score": 1.5,
        "procot_score": 0.0
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_5",
        "student_answer": "2.5 In C++, the constructor can be overloaded in that there can be more than one constructor for a class, each having different parameters.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.0
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_6",
        "student_answer": "2.5 1",
        "human_scores": [
            0.0,
            0.0,
            0.0
        ],
        "human_avg_score": 0.0,
        "procot_score": 0.25
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_7",
        "student_answer": "2.5 any number you want",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 1.35
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_8",
        "student_answer": "2.5 One",
        "human_scores": [
            0.0,
            0.0,
            0.0
        ],
        "human_avg_score": 0.0,
        "procot_score": 0.0
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_9",
        "student_answer": "2.5 by default just one, but they may be overloaded to create as many constructors as necessary",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.0
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_10",
        "student_answer": "2.5 as many as you want",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.25
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_11",
        "student_answer": "2.5 As many as you want, with different parameters.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_12",
        "student_answer": "2.5 infinite",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 1.75
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_13",
        "student_answer": "2.5 as many as you need",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.0
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_14",
        "student_answer": "2.5 As many as are needed, depending on how many variables one wishes to directly modify or leave as default when instantiating an object.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 1.75
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_15",
        "student_answer": "2.5 A very large amount of constructors can be created for any given class through overloading. When two constructors with a different type or number of parameters are created, they are said to be overloaded, and C++ can recognize which constructor to use based on the type of the variables that are passed/returned.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 0.5
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_16",
        "student_answer": "2.5 It depends on the number of objects. Each object should have a constructor.",
        "human_scores": [
            2.5,
            1.0,
            4.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.0
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_17",
        "student_answer": "2.5 Theoretically unlimited, as long as they are defined by the programmer.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_18",
        "student_answer": "2.5 As many as needed.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 1.5
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_19",
        "student_answer": "2.5 as many as wanted/needed",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.0
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_20",
        "student_answer": "2.5 several",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 0.0
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_21",
        "student_answer": "2.5 One",
        "human_scores": [
            0.0,
            0.0,
            0.0
        ],
        "human_avg_score": 0.0,
        "procot_score": 0.0
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_22",
        "student_answer": "2.5 one",
        "human_scores": [
            0.0,
            0.0,
            0.0
        ],
        "human_avg_score": 0.0,
        "procot_score": 0.0
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_23",
        "student_answer": "2.5 There can be infinite constructors as long as the signature is different.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_24",
        "student_answer": "2.5 that depends on the number of data members in the class",
        "human_scores": [
            1.5,
            0.0,
            3.0
        ],
        "human_avg_score": 1.5,
        "procot_score": 0.0
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_25",
        "student_answer": "2.5 one",
        "human_scores": [
            0.0,
            0.0,
            0.0
        ],
        "human_avg_score": 0.0,
        "procot_score": 0.0
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_26",
        "student_answer": "2.5 you can overload constructors as you need",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 1.75
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_27",
        "student_answer": "2.5 As many as the programmer wants to create.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.0
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_28",
        "student_answer": "2.5 one",
        "human_scores": [
            0.0,
            0.0,
            0.0
        ],
        "human_avg_score": 0.0,
        "procot_score": 0.0
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_29",
        "student_answer": "2.5 as many as you want, as long as they each have a unique argument list",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "2.5 How many constructors can be created for a class?",
        "student_id": "student_30",
        "student_answer": "2.5 as many as the user decides to use.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 1.5
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_1",
        "student_answer": "2.6 A function definition does not require any additional information that needs to be passed inside its parenthesis to execute. While a definition prototype requires more than one parameters to be passed in order to complete its task.",
        "human_scores": [
            4.0,
            5.0,
            3.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.0
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_2",
        "student_answer": "2.6 The FUNCTION PROTOTYPE is where the programmer declares that he/she is using a function other than main( ). This is like declaring a variable, the programmer knows that he/she will be using in the future, but has yet to say where they are going to use it, or how. This is answers the question who, it gives the function a name and character. The function prototype, by common practice is placed at the beginning of the program after the #includes and before main( ). The FUNCTION DEFINITION is the guts of the function. This is where the programmer decides what the function is going to do and tells it how to do it. It takes whatever information it is given and performs the operations. It works sort of like the brain, the brain takes in input and based upon that input performs in some way producing an output. The function defintion is placed outside of main( ) and any other functions. A function is its own entity and should be thought of as such.",
        "human_scores": [
            2.5,
            1.0,
            4.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 4.0
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_3",
        "student_answer": "2.6 A function prototype tells the compiler the function name, return type and the number and type of parameters without revealing the implementations contained in the function definition.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_4",
        "student_answer": "2.6 Function prototype is a declaration. Function definitions (w/multiple parameters) often require more than one piece of information. to perform their tasks.",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 2.0
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_5",
        "student_answer": "2.6 A function prototype is a declaration of a function that tells the compiler the function's name, its return type and the types of its parameters.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_6",
        "student_answer": "2.6 A prototype shows only return types and necessary parameters. The definition includes names for those parameters and defines what the object is actually capable of doing.",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.375
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_7",
        "student_answer": "2.6 prototype only tells the user what data types go into a function and what type is returned.",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.75
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_8",
        "student_answer": "2.6 Function prototype is located in the .h file and only contains the access function name and paramater type. Function definition contains the code for the function to perform its activity.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.0
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_9",
        "student_answer": "2.6 a function prototype is used to reference the compiler to a function that will be defined later on, a function definition is the actual function itself, complete with return type, parameters, etc...",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 3.5
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_10",
        "student_answer": "2.6 A function prototype describes a class's public interface without revealing the class's member function implementations",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 0.5
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_11",
        "student_answer": "2.6 Function definitions are just that, the definition. The prototype is what the compiler uses to check that calls to function are correct.",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 1.75
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_12",
        "student_answer": "2.6 a prototype does not include any actual code where the function has all the code that is executed in the program.",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 3.0
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_13",
        "student_answer": "2.6 a prototype declares what will be used in the program and the definition",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 2.25
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_14",
        "student_answer": "2.6 A function prototype lays out the name, return type, and the number and types of parameters the function expects to receive in a certain order. The details for function prototypes are in the function definition.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_15",
        "student_answer": "2.6 A function definition is the code that defines the function placed in the {} brackets that determines that function's operation. A function prototype shows the function's public interface without exposing implementation. It shows name, return type and type of paramaters.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_16",
        "student_answer": "2.6 A function prototype is just a declaration of the function existing, and cant be used as an actual function. A function has to be created with a definition within to tell the compiler what the function does.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 3.25
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_17",
        "student_answer": "2.6 the Prototype creates a framework to call the function definition. While a function definition is where the function is actually programmed out and created into a final product.",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.25
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_18",
        "student_answer": "2.6 A function prototype describes the class's public interface without providing how the function works. A function definition contains the inner workings of the function.",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.625
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_19",
        "student_answer": "2.6 prototype states all functions in that class before compilation, where the definition actually holds the source for the functions",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 3.0
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_20",
        "student_answer": "2.6 Function prototypes tell the compiler the function names, its return type, and the types of its parameters where as, function definitions actually implement the member functions.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_21",
        "student_answer": "2.6 A function prototype just specifies parameters. A function definition includes parameters and a code body.",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 3.5
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_22",
        "student_answer": "2.6 Function prototypes describe the class's public interface",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 0.75
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_23",
        "student_answer": "2.6 A prototype only declares name, return type, and input type. A definition also defines the scope, variables, process, and return function",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 4.0
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_24",
        "student_answer": "2.6 a function prototype simply declares the functions parameters, the function definition includes any necessary variables and the function's actual code",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.9
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_25",
        "student_answer": "2.6 A functgion prototype is a declaration of a function , while function definition specifies what a function does",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 3.25
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_26",
        "student_answer": "2.6 in a function prototype you include the return type, the name of the function, and its parameters if any are needed. in a function definition you write the code of what the function will do.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_27",
        "student_answer": "2.6 A function definition contains all the code for a function to work. A function prototype just shows the output, input and function name.",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 4.5
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_28",
        "student_answer": "2.6 function prototype describe the class's public interface without revealing the class's member function implementations, function definitions show what implementations are being done",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.5
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_29",
        "student_answer": "2.6 A function prototype only names the function, its return type, and it's argument list, while a definition defines the above as well as what the function actually does.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "2.6 What is the difference between a function prototype and a function definition?",
        "student_id": "student_30",
        "student_answer": "2.6 function prototype describes a classes interface without reviling whatever is inside as for the function definition can't do that.",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.25
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_1",
        "student_answer": "2.7 the role of a header file list all the functions a class can do while hiding the inner workings of its functions",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.25
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_2",
        "student_answer": "2.7 The main role of header file is it is used to share information among various files.",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 2.5
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_3",
        "student_answer": "2.7 Header files separate files in which classes are defined and allow the compiler to recognize classes when used elsewhere.",
        "human_scores": [
            3.5,
            4.0,
            3.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.75
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_4",
        "student_answer": "2.7 No",
        "human_scores": [
            0.0,
            0.0,
            0.0
        ],
        "human_avg_score": 0.0,
        "procot_score": 0.0
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_5",
        "student_answer": "2.7 A header file consists of \"reusable\" source code such as a class in a file that by convention has a .h filename extension. This differs from .cpp files that contain \"source-code.\"",
        "human_scores": [
            3.5,
            4.0,
            3.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.75
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_6",
        "student_answer": "2.7 To provide information about the contents of a library. It includes the definition of classes, declarations of functions, data types, and constants.",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.5
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_7",
        "student_answer": "2.7 the header file shows the user what types go into and come out of a function but does not allow a user to manipulate the actual code for the function.",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.5
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_8",
        "student_answer": "2.7 Header files declares the class member functions.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.5
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_9",
        "student_answer": "2.7 A header file allows for the separation of declaration and implementation into separate files.",
        "human_scores": [
            4.0,
            5.0,
            3.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.25
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_10",
        "student_answer": "2.7 the header file has access to the C++ Standard Library and makes certain classes like class string work.",
        "human_scores": [
            1.5,
            0.0,
            3.0
        ],
        "human_avg_score": 1.5,
        "procot_score": 0.5
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_11",
        "student_answer": "2.7 \"Instruct\" the compiler on how to interface with library and user-written components.",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 2.5
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_12",
        "student_answer": "2.7 create a comon area to contain reusable functions.",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 2.0
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_13",
        "student_answer": "2.7 to declare the functions being used in the classes",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 2.5
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_14",
        "student_answer": "2.7 #include \"hat.h\" allows the use of the hat container, so called from the act of pulling names from a hat. The header file for hat includes functions for storage and retrieval of it's contents, mainly put(), peek(), and pull().",
        "human_scores": [
            1.5,
            0.0,
            3.0
        ],
        "human_avg_score": 1.5,
        "procot_score": 0.0
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_15",
        "student_answer": "2.7 To hold reusable content or modules separate from the actual source-code file that can be easily referenced and employed for different programs.",
        "human_scores": [
            4.0,
            5.0,
            3.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 3.25
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_16",
        "student_answer": "2.7 a header file is a file used to store a list of prototye functions and data members.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_17",
        "student_answer": "2.7 A header file is a cross communication method between source files, to help limit the size of each individual program. Without header files a program will be 1 large lump of code and thus fairly hard to debug and traverse.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 0.5
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_18",
        "student_answer": "2.7 It contains reusable source code for use by other classes.",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.0
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_19",
        "student_answer": "2.7 to separate the source code from the main function, allows the methods/classes to be included in the program without direct coding. allows re usability.",
        "human_scores": [
            3.5,
            4.0,
            3.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.75
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_20",
        "student_answer": "2.7 Header files have reusable source code in a file that a programer can use.",
        "human_scores": [
            2.5,
            3.0,
            2.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 1.25
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_21",
        "student_answer": "2.7 To hide the definition and details of a class. Also to help readability of the main C++ file.",
        "human_scores": [
            3.5,
            4.0,
            3.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.5
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_22",
        "student_answer": "2.7 To allow the compiler to recognize the classes when used elsewhere.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.75
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_23",
        "student_answer": "2.7 A header file declares a class, its data, and functions available through that class.",
        "human_scores": [
            4.0,
            5.0,
            3.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 3.75
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_24",
        "student_answer": "2.7 header files contain code which can be used in multiple files",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.5
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_25",
        "student_answer": "2.7 Allow compiler to recognize the classes when used elsewhere",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 2.0
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_26",
        "student_answer": "2.7 Allow compiler to recognize the classes when used elsewhere",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.0
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_27",
        "student_answer": "2.7 To promote function reusuablitly",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.0
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_28",
        "student_answer": "2.7 class definitions are placed here",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.0
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_29",
        "student_answer": "2.7 A header file usually contains class and/or function prototypes.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.0
    },
    {
        "question": "2.7 What is the role of a header-file?",
        "student_id": "student_30",
        "student_answer": "2.7 contains all the standard C++ library's i.e. string",
        "human_scores": [
            1.0,
            0.0,
            2.0
        ],
        "human_avg_score": 1.0,
        "procot_score": 0.0
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_1",
        "student_answer": "3.1 It includes the name of the program, the type of parameters it can take. It should also include a brief description of what the function does.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.5
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_2",
        "student_answer": "3.1 it includes the specific information about the function such as input and output variable types and how many of each.",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 2.25
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_3",
        "student_answer": "3.1 The function signature includes the name of the function and the types of its arguments.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.95
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_4",
        "student_answer": "3.1 A function signature consists of the function prototype. This tells you the general information about a function, its name, parameters, what scope it is in, and other miscellaneous information.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.0
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_5",
        "student_answer": "3.1 It includes the name of the function and the types of its arguments.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_6",
        "student_answer": "3.1 Name, paramaters, scope, and other general function information",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.0
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_7",
        "student_answer": "3.1 It includes a function name and parameter list. Does not include return type. Function signatures must be different.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_8",
        "student_answer": "3.1 input parameters and return type",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 2.0
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_9",
        "student_answer": "3.1 The portion of the function prototyp tha has the function name and the arguments but NOT the return type.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.9
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_10",
        "student_answer": "3.1 Name of the function and the types of it's arguments",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_11",
        "student_answer": "3.1 The name of the function and the types of its arguments.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_12",
        "student_answer": "3.1 Includes the name of the function and the types of its arguments.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.25
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_13",
        "student_answer": "3.1 identification of a function and the data types of its parameters, it has the name, and the data type variables",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_14",
        "student_answer": "3.1 a return type, and input parameters",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.5
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_15",
        "student_answer": "3.1 The function signature includes the method name and the input types.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_16",
        "student_answer": "3.1 A function signature includes the name of the function and types of arguments, but not the return type.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.25
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_17",
        "student_answer": "3.1 The signature can include a result type and thrown errors.",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.5
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_18",
        "student_answer": "3.1 function name, and input paramaters",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.25
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_19",
        "student_answer": "3.1 The name of the function and the types of its arguments. This includes the number, type, and order the parameters appear in.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_20",
        "student_answer": "3.1 the name of the function and the types of its arguments",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_21",
        "student_answer": "3.1 A function signature includes the name of the function and the types of its arguments",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_22",
        "student_answer": "3.1 A function signature includes a function's return type, parameters and semi-colon.",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.0
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_23",
        "student_answer": "3.1 the name of the function and the types of its arguments",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_24",
        "student_answer": "3.1 the function's name and parameters",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_25",
        "student_answer": "3.1 The name of the function and the types of its arguments.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_26",
        "student_answer": "3.1 The portion of a function prototype that includes the name of the function and the types of its arguments",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_27",
        "student_answer": "3.1 the name of the function and its parameters",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.25
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_28",
        "student_answer": "3.1 The function name and parameters",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_29",
        "student_answer": "3.1 name of function and types of arguments",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_30",
        "student_answer": "3.1 a function's return type and parameter list",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 2.0
    },
    {
        "question": "3.1 What does a function signature include?",
        "student_id": "student_31",
        "student_answer": "3.1 it includes the name of the function, and the types of its arguments. it does not specify the function return type. Function in the same scope must have unqiue signatures.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_1",
        "student_answer": "3.2 Any functions that follows their deceleration that are in the source code file are allowed to have access the variables. Also global scope variables retrain their value throughout the execution of the program.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.0
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_2",
        "student_answer": "3.2 they can be accessed by any C++ file anywhere.",
        "human_scores": [
            2.5,
            0.0,
            5.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.5
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_3",
        "student_answer": "3.2 Global variables have file scope.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_4",
        "student_answer": "3.2 The scope of global variables are created by placing variable declarations outside any class or function definition. Global variables retain their values throughout the execution of the program and they can be referenced by any function that follows their declarations or definitions in the source file.",
        "human_scores": [
            2.5,
            0.0,
            5.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 1.0
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_5",
        "student_answer": "3.2 A global variable is an identifier that retains it's value throughout the execution of the program. It has file scope.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.75
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_6",
        "student_answer": "3.2 Global Variables can be used in any function as long as the appropriate .h file that holds the variable is included",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.5
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_7",
        "student_answer": "3.2 They can be accessed by any part of the program. It can be referenced by any function that follows the declarations or definitions in the source file.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_8",
        "student_answer": "3.2 can be accesed by any classes that have and object of that variables class in it",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.0
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_9",
        "student_answer": "3.2 Global variables have file-scope. The variable is know to all functions throught the file",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_10",
        "student_answer": "3.2 The entire program",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.0
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_11",
        "student_answer": "3.2 They have file scope when placed outside a function.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.75
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_12",
        "student_answer": "3.2 File scope.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_13",
        "student_answer": "3.2 They can be used throughout the program",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.0
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_14",
        "student_answer": "3.2 Global variable can b accessed by any class wit an object in the variables class",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.0
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_15",
        "student_answer": "3.2 The scope of global variables is at the file level.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.75
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_16",
        "student_answer": "3.2 Global variables all have file scope.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_17",
        "student_answer": "3.2 it is accessible by all functions within a program",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.0
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_18",
        "student_answer": "3.2 variables accessible anywhere in the program, as long as they are public.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.0
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_19",
        "student_answer": "3.2 They can be referenced by any function following their declaration or definition inside the source file.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.25
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_20",
        "student_answer": "3.2 globally, anywhere in the program.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.5
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_21",
        "student_answer": "3.2 Global variables have a file scope",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_22",
        "student_answer": "3.2 The entire program.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 0.0
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_23",
        "student_answer": "3.2 throughout the execution of the program",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 0.5
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_24",
        "student_answer": "3.2 If a variable is declared global, any function or class can use that variable.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.5
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_25",
        "student_answer": "3.2 The entire program or file.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.25
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_26",
        "student_answer": "3.2 throught the programm",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.5
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_27",
        "student_answer": "3.2 the whole code",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.0
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_28",
        "student_answer": "3.2 File scope",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_29",
        "student_answer": "3.2 can be referenced by any function that follows their declarations or definitions in the source file",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_30",
        "student_answer": "3.2 global variables have program scope (accessible anywhere in program)",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 0.5
    },
    {
        "question": "3.2 What is the scope of global variables?",
        "student_id": "student_31",
        "student_answer": "3.2 variables that exist throught the entire script. their values can be changed anytime in the code and fucntions.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.0
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_1",
        "student_answer": "3.3 It expands the function's definition in that place. Once the functions is called you can use it as many times as you need. The compiler just expands on the function.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.5
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_2",
        "student_answer": "3.3 When the compiler inline-expands a function call, the function's code gets inserted into the caller's code stream (conceptually similar to what happens with a #define macro). This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code — optimize the called code into the caller.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.0
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_3",
        "student_answer": "3.3 The inline keyword advises the compiler to copy the function's code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_4",
        "student_answer": "3.3 The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.5
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_5",
        "student_answer": "3.3 Placing the qualifier inline before a function's return type in the function definition \"advises\" the compiler to generate a copy of the function's code in place to avoid a function call.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_6",
        "student_answer": "3.3 You declare your inline function in the header or before your int main(). You then can call that function at anytime in your main program quickly and easily.",
        "human_scores": [
            2.0,
            0.0,
            4.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.5
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_7",
        "student_answer": "3.3 It expands a small function out... making your code longer, but also makes it run faster.",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 3.0
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_8",
        "student_answer": "3.3 the function is not treated as a separate unit like other functions",
        "human_scores": [
            3.5,
            4.0,
            3.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.5
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_9",
        "student_answer": "3.3 When the program compiles,it will copy the function inplace, avoiding a function call.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.25
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_10",
        "student_answer": "3.3 It replaces all instances of that function call with the inline code itself, resulting in longer but faster programs.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_11",
        "student_answer": "3.3 The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.5
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_12",
        "student_answer": "3.3 Ignores the inline qualifier and typically does so for all but the smallest functions.",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.0
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_13",
        "student_answer": "3.3 If the function is small enough it will expand it but it will run faster as it will avoid making so many calls to the function.",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.5
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_14",
        "student_answer": "3.3 it treats them as the same function",
        "human_scores": [
            2.0,
            2.0,
            2.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.0
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_15",
        "student_answer": "3.3 Inline functions are copied in place, instead of being referenced.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_16",
        "student_answer": "3.3 For inline functions, the compiler creates a copy of the function's code in place so it doesn't have to make a function call and add to the function call stack.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_17",
        "student_answer": "3.3 it generates a copy of the function's coding which eliminates calling the function",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_18",
        "student_answer": "3.3 not answered",
        "human_scores": [
            0.0,
            0.0,
            0.0
        ],
        "human_avg_score": 0.0,
        "procot_score": 0.0
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_19",
        "student_answer": "3.3 It generates a copy of the function's code by by inserting it in the program.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.75
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_20",
        "student_answer": "3.3 tells the compiler to make a copy of function's code in place to avoid a function call. it typically ignores it, except for the smallest functions.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_21",
        "student_answer": "3.3 The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.",
        "human_scores": [
            2.0,
            2.0,
            2.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.5
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_22",
        "student_answer": "3.3 Multiple copies of the function code are inserted into the program, making it bigger.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.5
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_23",
        "student_answer": "3.3 compiler ignores inline qualifier",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.0
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_24",
        "student_answer": "3.3 It generates a copy of the function, if it is needed again.",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 3.0
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_25",
        "student_answer": "3.3 The complier includes copies of inline functions instead of making function calls, but usually only with very small functions.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.25
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_26",
        "student_answer": "3.3 Compiler generate a copy of the function's code in place (when appropriate) to avoid a function call",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_27",
        "student_answer": "3.3 instead of calling the function every time it is invoked, the compiler will replace the function call with a copy of the function body",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_28",
        "student_answer": "3.3 Expands the function into the program",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.5
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_29",
        "student_answer": "3.3 it generates a copy of the functions code in place to avoid a function call",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_30",
        "student_answer": "3.3 the function call will be replaced by the code that was defined in the inline function",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.0
    },
    {
        "question": "3.3 How does the compiler handle inline functions?",
        "student_id": "student_31",
        "student_answer": "3.3 When the compiler inline-expands a function call, the function's code gets inserted into the caller's code stream (conceptually similar to what happens with a #define macro). This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code — optimize the called code into the caller.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.0
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_1",
        "student_answer": "3.4 Overall the program has better performance (means it is faster) because it does not have to copy large amounts of data.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_2",
        "student_answer": "3.4 because you can't change the original and passing by reference limits memory needed for the program.",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.0
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_3",
        "student_answer": "3.4 Passing by reference can eliminate the pass-by-value overhead of copying large amounts of data.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_4",
        "student_answer": "3.4 It is often more efficient to pass references, rather than large objects, to functions. This allows the compiler to pass the address of the object while maintaining the syntax that would have been used to access the object.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_5",
        "student_answer": "3.4 Pass by reference is good for performance reasons, because it can eliminate the pass by value overhead of copying large amounts of data.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.25
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_6",
        "student_answer": "3.4 You do not alter the original value of the variable that was passed.",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.0
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_7",
        "student_answer": "3.4 Don't have to make copies of stuff.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.0
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_8",
        "student_answer": "3.4 you do not use unessesary memory space to copy variables between functions",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_9",
        "student_answer": "3.4 It elimitates the need to copy large amonts of data",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.25
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_10",
        "student_answer": "3.4 The function can change the data stored in a variable passed by reference directly.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.75
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_11",
        "student_answer": "3.4 Gives called function the ability to access and modify the caller's argument data.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.0
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_12",
        "student_answer": "3.4 Gives called function the ability to access and modify the caller's argument data directly.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.25
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_13",
        "student_answer": "3.4 It is more efficient and it changes the variable not online inside the function but outside so that the new value can be used elsewhere.",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 3.25
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_14",
        "student_answer": "3.4 you don't make another copy and waste memory",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_15",
        "student_answer": "3.4 Passing by reference eliminates the copying of large amounts of data, typical with pass by value.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.25
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_16",
        "student_answer": "3.4 If a function's arguments are large in size, computing time and memory space is not wasted copying down the argument and passing it to the function. Also pass by reference gives the function called the permission to read edit the argument directly.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.25
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_17",
        "student_answer": "3.4 Gives access to the caller data directly, also it allows for modifying the data.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.0
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_18",
        "student_answer": "3.4 less overhead overall, and you modify the variable directly.",
        "human_scores": [
            3.5,
            4.0,
            3.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.5
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_19",
        "student_answer": "3.4 The original variable being referenced can be modified directly by the called function.",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.5
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_20",
        "student_answer": "3.4 gives function ability to access and modify the caller's argument data directly",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.0
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_21",
        "student_answer": "3.4 Gives the called function the ability to access and modify the caller's argument data directly.",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.0
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_22",
        "student_answer": "3.4 Less overhead than passed by value, especially when using large numbers.",
        "human_scores": [
            3.5,
            4.0,
            3.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 3.25
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_23",
        "student_answer": "3.4 large data items can be passed without copying the entire data point, reducing execution time and the amout of memory space needed",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_24",
        "student_answer": "3.4 The data can be modified directly instead of making a copy of the data. Improves execution time with large amounts of data.",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 4.0
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_25",
        "student_answer": "3.4 Functions can directly modify arguments that are passed by reference.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.0
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_26",
        "student_answer": "3.4 It gives access and modify the caller's argument data directly. It eliminate the pass by value overhead of copying large amounts ofdata",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_27",
        "student_answer": "3.4 it takes less memory, thus it would make the program faster",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 0.75
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_28",
        "student_answer": "3.4 You are able to modify the variable that is referenced directly.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.5
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_29",
        "student_answer": "3.4 if you pass by reference, you can modify the value as opposed to passing by value where you cannot change the value",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.0
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_30",
        "student_answer": "3.4 only the memory address is sent to the function, so no copy of the object sent needs to be made. It makes the function run faster, and saves memory.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "3.4 What is the main advantage associated with function arguments that are passed by reference?",
        "student_id": "student_31",
        "student_answer": "3.4 Actual arguments are associated with dummy arguments when a function or subroutine is referenced. In a procedure reference, the actual argument list identifies the correspondence between the actual arguments provided in the list and the dummy arguments of the subprogram",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.5
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_1",
        "student_answer": "3.5 The compiler selects the proper functions to execute based on number, types and order of arguments in the function call.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_2",
        "student_answer": "3.5 They differentiated by the compiler by the conditions/inputs used for one of the overloaded functions.",
        "human_scores": [
            3.0,
            4.0,
            2.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 2.0
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_3",
        "student_answer": "3.5 The compiler distinguishes overloaded functions by their signatures. It encodes each function identifier with the number and types of its parameters to generate type-safe linkage, which ensures the proper overloaded function is called.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_4",
        "student_answer": "3.5 Overloaded functions are distinguished by their signatures, Name mangling or name decoration, and type-safe linkage ensures that proper overloaded functions is called and types of the arguments conform to tpes to the parameters.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_5",
        "student_answer": "3.5 The compiler selects proper function to execute based on number, types and order of arguments in the function call.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_6",
        "student_answer": "3.5 By the type they are initilized with (int, char, etc.)",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.5
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_7",
        "student_answer": "3.5 It selects the proper function to execute based on number, types and order of arguments in the function call.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.25
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_8",
        "student_answer": "3.5 overloaded functions must have the same return type but different input parameters",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 2.5
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_9",
        "student_answer": "3.5 It examines the names, types, and order of arguments on each function.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_10",
        "student_answer": "3.5 unique function signatures",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_11",
        "student_answer": "3.5 Is based on number, types, and order of arguments in the function call.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_12",
        "student_answer": "3.5 Compiler selects proper function to execute based on number, types and order of arguments in the function call.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_13",
        "student_answer": "3.5 not answered",
        "human_scores": [
            0.0,
            0.0,
            0.0
        ],
        "human_avg_score": 0.0,
        "procot_score": 0.0
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_14",
        "student_answer": "3.5 they have to have same return type, but different input parameters",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 2.5
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_15",
        "student_answer": "3.5 Overloaded functions are differentiated by their parameters.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.0
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_16",
        "student_answer": "3.5 The compiler selects the right function to execute from the number, types and order of arguments in the function call.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.25
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_17",
        "student_answer": "3.5 it creates a set of candidate functions then a set of viable functions",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.25
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_18",
        "student_answer": "3.5 their function signature.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_19",
        "student_answer": "3.5 The number and type of its parameters.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_20",
        "student_answer": "3.5 by their function signature",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.25
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_21",
        "student_answer": "3.5 They have the same name, just different parameters.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.5
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_22",
        "student_answer": "3.5 They are differntiated by number, types and order of arguments in the function call.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_23",
        "student_answer": "3.5 it looks at the number, types, and order of arguments in the function call",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_24",
        "student_answer": "3.5 The compiler differentiates overloaded functions by their signature.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.25
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_25",
        "student_answer": "3.5 By the number, types, and order of their arguments",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.25
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_26",
        "student_answer": "3.5 Compiler selects proper function to execute based on number, types and order of arguments in the function call.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_27",
        "student_answer": "3.5 paremeters",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 0.0
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_28",
        "student_answer": "3.5 By the number, and the types and order of the parameters.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_29",
        "student_answer": "3.5 by the number and type of arguments",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_30",
        "student_answer": "3.5 by their signature (return type, argument list)",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 3.0
    },
    {
        "question": "3.5 How are overloaded functions differentiated by the compiler?",
        "student_id": "student_31",
        "student_answer": "3.5 overloaded function simply invovles haing a method with the same name within the class. is used to implement a method for subclass which overrides in other words replaces the implementation of the super class. Overloading the concept of providing different meaning to a object based on the context of its presence. Overloading is one type of polymorphism and this is also a feature in programing.",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.5
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_1",
        "student_answer": "3.6 A base case that is the simplest case for a problem so that the function will lead to it, if this does not happen then it will end up as an infinite loop. And a condition to know when to terminate.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_2",
        "student_answer": "3.6 badly designed algorithyms. using recursion for a non recursive problem.",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_3",
        "student_answer": "3.6 Infinite recursion can occur when the base case is omitted or the recursion step is written incorrectly so that it never converges on the base case.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_4",
        "student_answer": "3.6 Infinite recursion is an infinite loop if the condition is not met. Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case causes \"indefinite\" recursion, eventually exhausting memory.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_5",
        "student_answer": "3.6 Either omitting the base case or writing the recursion step incorrectly so that it does not converge on the base case can cause an infinite recursion.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_6",
        "student_answer": "3.6 Not having a base case that returns a base value.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 3.5
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_7",
        "student_answer": "3.6 Incorrect or missing base case. Must reduce to the base case. The function must get simpler each time it is run (converge to the base case).",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_8",
        "student_answer": "3.6 no base case no change in values.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 4.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_9",
        "student_answer": "3.6 If at each recursive call the problem does not diminish or if it does not diminish to a base case, can cause infinite recursion.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_10",
        "student_answer": "3.6 Omitting the base case or incorrectly calling the recursive step.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_11",
        "student_answer": "3.6 The recursive problem cannot be reduced to reach the base case.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.5
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_12",
        "student_answer": "3.6 Lack of defining a base case, or writing the recursion step incorrectly so that it does not converge on the base case",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_13",
        "student_answer": "3.6 Not having the proper case to leave the recursion",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 3.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_14",
        "student_answer": "3.6 no base case, or the recursive calls do not converge to the base case",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_15",
        "student_answer": "3.6 No base case, or an incorrectly written recursion step that does not converge on the base case will lead to infinite recursion.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_16",
        "student_answer": "3.6 If the recursion function never reaches or successfully defines the base case it will recurse forever. This happens many ways, such as the function doesn't progress towards the base case, or the function is coded poorly and doesn't even contain a base case.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_17",
        "student_answer": "3.6 not creating a base case, or in the case where the base case will never be met.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_18",
        "student_answer": "3.6 improper handling of cases such that not all possible values are able to be handled.",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_19",
        "student_answer": "3.6 There is no base case. The recursion step doesn't reduce the problem during each recursive call.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 5.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_20",
        "student_answer": "3.6 no base case, as in a single return that does not include calling the function again. a static value to end at.",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 3.5
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_21",
        "student_answer": "3.6 Either omitting the base case, or writing the recursion step incorrectly so the it does not reach the base case can cause infinite recursion.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_22",
        "student_answer": "3.6 omitting the base case or writing the recursive call so that it does not converge upon the base case.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_23",
        "student_answer": "3.6 Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_24",
        "student_answer": "3.6 Infinite recursion may occur if no base case is defined or if the call is not varied.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 4.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_25",
        "student_answer": "3.6 Not having a base case, or building a recursion process that doesn't converge on the base case.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_26",
        "student_answer": "3.6 Either omitting the base case, or writing the recursion step incorerectly",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_27",
        "student_answer": "3.6 no base case or if the programmar does not define the base case as the simplest case and it never gets reached",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_28",
        "student_answer": "3.6 No easily reached base case and no base case at all",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_29",
        "student_answer": "3.6 function is never allowed to reach the 'base case'",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.25
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_30",
        "student_answer": "3.6 it has no base case, or the base case is never met",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "3.6 When defining a recursive function, what are possible causes for infinite recursion?",
        "student_id": "student_31",
        "student_answer": "3.6 recursion refers to situations in which functions call themselves. These types of functions are known as recursive functions. That being said Infinite recursion occurs when the function is designed in such a way as to call it self forever without stopping possible causes",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_1",
        "student_answer": "3.7 Both involve a controlled repetition structures, and they both have a termination test. Also both of them can loop forever.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_2",
        "student_answer": "3.7 As discussed earlier, recursion may be used to process iterative actions. Recursion is used for calculations where the answer can be described in a function that relates to itself.",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_3",
        "student_answer": "3.7 Both iteration and recursion are based on control statements and involve repetition. They can both also occur indefinitely.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_4",
        "student_answer": "3.7 Both are based on a control statement - Iteration-repetition structure - Recursion-selection structure Both involve repetition -Iteration-explicitly uses repetition structure -Recursion-repeated function calls Both involve a termination test -Iteration-loop-termination test -Recursion-base case Both gradually approach termination -Iteration-modifies counter until loop-termination test fails -Recursion-produces progressively simpler versions of problem Both can occur indefinitely -Iteration-if loop-continuation condition never fails -Recursion-if recursion step does not simplify the problem",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_5",
        "student_answer": "3.7 Iteration and recursion have many similarities: both are based on a control statement, involve repetition, involve a termination test, gradually approach termination and can occur infinitely.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_6",
        "student_answer": "3.7 Both rely on repetition, both have a base case, both can become an infinite loop. Anything recursive can also be solved with iteration.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_7",
        "student_answer": "3.7 Both will repeat (loop) until a condition is met, and exit the loop. Both are capable of entering an infinite loop.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 5.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_8",
        "student_answer": "3.7 anything you can do iterativly you can do recursively",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.5
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_9",
        "student_answer": "3.7 Both are repetative and both have a end test.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.75
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_10",
        "student_answer": "3.7 Incorrectly writing either can result in infinite loops, both perform the same task over and over.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 3.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_11",
        "student_answer": "3.7 Both are based on a control statement. Both involve repetition. Both involve a termination test. Both gradually approach termination. Both can occur infinitely.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_12",
        "student_answer": "3.7 Both are based on a control statement, Both involve repetition, Both involve a termination test, Both gradually approach termination, Both can occur infinitely",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_13",
        "student_answer": "3.7 not answered",
        "human_scores": [
            0.0,
            0.0,
            0.0
        ],
        "human_avg_score": 0.0,
        "procot_score": 0.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_14",
        "student_answer": "3.7 anything you can do recursively you can do iteratively",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_15",
        "student_answer": "3.7 Many problems can be solved by both iteration and recursion, and either may go into a condition of infinite execution if a termination test is omitted.",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 4.25
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_16",
        "student_answer": "3.7 Iteration and recursion both use repetition and perform several simple operations and algorithms successively until they reach a certain limit. So both involve a termination test to find that limit and both slowly approach that termination limit. Both are based on a control statement as well. If coded poorly, both can continue on for forever until the compiler or the computer either locks up, shuts down or halts the operation.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.9
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_17",
        "student_answer": "3.7 both based on control statement, involve repetition, and involve a termination test within loops",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_18",
        "student_answer": "3.7 they are methods of repeating the same task.",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 1.5
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_19",
        "student_answer": "3.7 Both involve a termination test. They use a control statement and repition to solve the problem. They can also result in an infinite loop.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_20",
        "student_answer": "3.7 based on a control statement, involve repetition, involve a termination test.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_21",
        "student_answer": "3.7 Both are bases on a control statement. Both involve repetition. Both involve a termination test. Both gradually approach termination. Both can occur infinitely.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_22",
        "student_answer": "3.7 both based on a control statement, both involve repitition, both involve a termination test, both gradually approach termination, both can potentially occur infinetly.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_23",
        "student_answer": "3.7 they are both based on a control statement, both involve repetition, both involve a termination case, both graduatlly approach that termination case, and both can occur infinitely",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_24",
        "student_answer": "3.7 They both use repetition, a control or test to terminate, and both can infinitely repeat if not defined correctly.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_25",
        "student_answer": "3.7 Both are based on a control statement; both gradually approach termination ending with a termination test; both involve repetition, and can both repeat infinitely if their termination requirements are not met.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_26",
        "student_answer": "3.7 both are based on a control statement, involve repetition and involve a termination test. both gradually approach termination, both can occur infinitely",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_27",
        "student_answer": "3.7 they are used to solve the same type of problems. they do a task over and over again until a cirtain conditional statement is reached (its called the base case in recursion).",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.4
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_28",
        "student_answer": "3.7 Based on control statement; involve repetition; involve a terminal test; both can occur infinitly",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_29",
        "student_answer": "3.7 repetition, termination test, eventually terminate, occur infinately",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_30",
        "student_answer": "3.7 both need to have some kind of base case to tell when the loop needs to stop.",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.0
    },
    {
        "question": "3.7 What are the similarities between iteration and recursion?",
        "student_id": "student_31",
        "student_answer": "3.7 they both are able to do repetiive tasks. however recurisve calls itself with different parameters and defines and exit clause that is guaranteeed to be reached. Iterative includes a loop which iterates a pre-determined number of times, or checks for an exit clause every time through",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.0
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_1",
        "student_answer": "4.1 int n[10]; //array of 10 integers and int n[arraySize] //where arraySize is some positive integer defined by the user",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 3.5
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_2",
        "student_answer": "4.1 by either inputing the different elements in the array at coding or giving the array specifacations as to the size of the array. it is also possible when giving it specifacations to tell the array to grow as needed.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 3.25
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_3",
        "student_answer": "4.1 You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_4",
        "student_answer": "4.1 Pass the length along with the array or use a vector.",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.0
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_5",
        "student_answer": "4.1 One way is to declare a size of the array using a variable that is equal to an integer. The other way, if the size is omitted in the declaration, the compiler determines the size of the array based on the size of the initializer list.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_6",
        "student_answer": "4.1 In the declaration (int array [x]) or with an initilizer (int array[]={0,1,2,etc.}",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_7",
        "student_answer": "4.1 1. Declare the length of the array (int array[10];) 2. Initialize the array (int array[] = {0, 1, 2, 3}; //compiler will assume size of 4)",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.25
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_8",
        "student_answer": "4.1 statically and dynamically",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 1.0
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_9",
        "student_answer": "4.1 Explicitly int array[10]; or by variable const int size = 10; int array[size];",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 3.0
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_10",
        "student_answer": "4.1 Array lengths can be explicitly specified by inputing the number of elements between the brackets [ ] during declaration, or implicitly by including an initializer list WITHOUT specifying a number between [ ], the compiler will automatically declare the array with the proper number of elements needed for the list.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_11",
        "student_answer": "4.1 Specify an array√¢'¨'¢s size with a constant variable. And setting array elements with calculations.",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.25
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_12",
        "student_answer": "4.1 statically, using {} and dynamically, using []",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.5
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_13",
        "student_answer": "4.1 define it as array[5] or array[1,2,3,4,5]",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 4.25
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_14",
        "student_answer": "4.1 Static and dynamic.",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.5
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_15",
        "student_answer": "4.1 manually inside the brackets or automatically via an initializer list",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_16",
        "student_answer": "4.1 You can use an initializer list, or simply tell the compiler how many elements you want in the array. For an Initializer list: int a[] = {10, 2, 3, -4, 5}; For an elemental declaration: int b[5]; Both arrays have 5 elements in them, but array a is already initialized.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_17",
        "student_answer": "4.1 In a string you can specify with the strlen(arrayname) command. This gets the length of the string. Another way is with integers where you initiate the size from the start, ex array[40] specifying a possible length of up to 40. Then it is passed by an object the actual ammout in the array. Another way is to declare it in an initializing program.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.0
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_18",
        "student_answer": "4.1 Implicit, namely when you give it values, like {1,2,3,4,5,6,7,8,9}, at which the compiler will automatically give this a size. Static, during the declaration.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_19",
        "student_answer": "4.1 Supply an integer inside the brackets or the compiler counts the number of elements in the initializer list. int n[5]; int n[] = { 1,2,3,4,5 }",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_20",
        "student_answer": "4.1 either initializing the array with a specific length or initializing an array while declaring its contents.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_21",
        "student_answer": "4.1 within the brackets or by using an initializer list.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_22",
        "student_answer": "4.1 specify the number of elements in the array declaration with a constant or using a constant variable for future scalability",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 2.0
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_23",
        "student_answer": "4.1 with a number and with a variable",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.0
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_24",
        "student_answer": "4.1 explicitly, by declaring it in brackets (i.e. int array[50];) and implicitly, by initializing several values (i.e. int array[] = {1, 2, 3};)",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_25",
        "student_answer": "4.1 one way of specifying of array is A[10] ; other way of specifying array is a[arraysize] = [1,2,3,4,5,6,7,8,9,10}",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.25
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_26",
        "student_answer": "4.1 1-Initializing an array in a declaration with an initializer list 2-Specifying an array√¢'¨'¢s size with a constant variable",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_27",
        "student_answer": "4.1 Initializing the size in the brackets: int a[100]; Initializing the length by assigning variables: int a[] = {1,2,3};",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_28",
        "student_answer": "4.1 user defined value or by the number of elements in initializer list",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_29",
        "student_answer": "4.1 you can assign the size of it inside the brackets when you declare the array [3], or you can have it set by how many items you set the array equal to {1,2,3}",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.25
    },
    {
        "question": "4.1 What are the two different ways of specifying the length of an array?",
        "student_id": "student_30",
        "student_answer": "4.1 use an arraylist, or have your program ask the array how many elements it has. As an obj it it should have member length that is the number of slots it has.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 0.0
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_1",
        "student_answer": "4.2 strings that are used in an char array are much easier to manipulate than as a string object, because each character is stored separately rather than as a whole",
        "human_scores": [
            2.5,
            1.0,
            4.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.0
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_2",
        "student_answer": "4.2 the type string uses less storage and you have to change the string all at once. with an array of characters you can make permutations of words using the characters stored in the array, without needing to actually access and change the variables. with an array of characters you can just change how they're accessed.",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.5
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_3",
        "student_answer": "4.2 Unlike in a string declared using type string, in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.25
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_4",
        "student_answer": "4.2 All strings represented by character arrays end with the null character. You declare an object of type string just like any other type, for example: string s;",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_5",
        "student_answer": "4.2 By using an array of characters, one can store and manipulate the strings rather than just having a type string variable.",
        "human_scores": [
            2.5,
            1.0,
            4.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 2.0
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_6",
        "student_answer": "4.2 type string is an array of chars that will make an array of single letter characters while an array of strings will be an actual array of words (or an array of char arrays)",
        "human_scores": [
            2.0,
            0.0,
            4.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.5
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_7",
        "student_answer": "4.2 They're basically the same, however, a string ends w/ a null character, denoting the end of the string (and the size). A char array has potential to be any size, so it must be declared or limited.",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 4.5
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_8",
        "student_answer": "4.2 string is a class in the standard library and has method that modify it. Whereas the char array is on able to be modifie by the user.",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 0.0
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_9",
        "student_answer": "4.2 By using an array of characters, you are limited to the size of the array of characters. By declaring by type the end of the string is acknowledged by white space.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.25
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_10",
        "student_answer": "4.2 The data class type string are designed to handle character data, and has many functions built into the class library to deal with them. An array of characters however is subject to all the same rules of any other array with no real additional functionality. Another difference is that the string class deals with the null character implicitly, unlike an array of characters, which must handle the null character explicitly.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_11",
        "student_answer": "4.2 string declared used in an array of characters contains each character in the array and a special string-termination character called the null character versus the type string.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.25
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_12",
        "student_answer": "4.2 A char array reads a string as each individual character. A string literal array reads the entire string.",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.0
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_13",
        "student_answer": "4.2 array of characters can only hold as many characters as the array size and strings are not that limited.",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.5
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_14",
        "student_answer": "4.2 Stings can only be modified by functions of the String class, an array of characters can be modified by the user",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 0.5
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_15",
        "student_answer": "4.2 if by type string, the array contains an additional terminating null character",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 4.5
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_16",
        "student_answer": "4.2 The array of characters has a null character \\0 at the end of the array to signify the array's end. The string does not have this.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_17",
        "student_answer": "4.2 strings with type string are just that. Strings. They are not part of an array list at all where as one declared by an array is actually an array of characters able to be pointed and detected.",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.5
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_18",
        "student_answer": "4.2 the array of characters has a set length, while the type string has virtually unlimited length.",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.0
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_19",
        "student_answer": "4.2 Char array - Individual letters can be accessed directly with array subscript notation. String array - array subscript will return the entire string.",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.0
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_20",
        "student_answer": "4.2 array of characters need a termination character as well as size specification whether its explicit or implicit.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_21",
        "student_answer": "4.2 when using an array individual characters can be accessed and manipulated.",
        "human_scores": [
            2.5,
            1.0,
            4.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.0
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_22",
        "student_answer": "4.2 strings declared using an array of characters could result in data loss if character array not initialized large enough.",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.5
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_23",
        "student_answer": "4.2 an array is passed by reference therefore if an array of characters is changed, the memory is changed not just the variable",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.0
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_24",
        "student_answer": "4.2 the type string has several built-in functions not available when using a char array, but the individual characters in an array or more directly accessible than the characters in a string type string.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 0.0
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_25",
        "student_answer": "4.2 declaring a string, it includes white spaces but declaring a array of character does not include white spaces",
        "human_scores": [
            1.5,
            0.0,
            3.0
        ],
        "human_avg_score": 1.5,
        "procot_score": 0.0
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_26",
        "student_answer": "4.2 an array of characters has one element a string doesnt have. it is the termination element, or \"null\"",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_27",
        "student_answer": "4.2 Strings declared using the type string can vary in length. Strings declared using an array of characters can not extend past the array length.",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 0.0
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_28",
        "student_answer": "4.2 cant modify individual characters of a type string array, character type array can modify individual characters",
        "human_scores": [
            2.5,
            1.0,
            4.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.75
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_29",
        "student_answer": "4.2 the type string is a class and is safer, while the other is just an array of characters.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.75
    },
    {
        "question": "4.2 What is the main difference between strings declared using the type string versus strings declared using an array of characters?",
        "student_id": "student_30",
        "student_answer": "4.2 array it is the collection of similar data types ex:int a[10] ten indicates the size of array. [ ] is index of array, we can give only integer values to array of a. where as string mean collection of group of characters. string declarations have a datatype usually causes storage to be allocated in memory that is capable of holding some predetermined number of symbols. However Arrays can be declared to contain values of any non reference data type. Multiple arrarys of the same type",
        "human_scores": [
            2.5,
            1.0,
            4.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.0
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_1",
        "student_answer": "4.3 by reference only",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_2",
        "student_answer": "4.3 a reference pointer to an element in the array.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.0
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_3",
        "student_answer": "4.3 Arrays are passed to functions by reference.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_4",
        "student_answer": "4.3 -Arrays are passed by reference -Individual array elements passed by value -Functions that take arrays as arguments -Function prototypes may include parameter names -const array parameters",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.0
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_5",
        "student_answer": "4.3 Arrays are passed by reference.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_6",
        "student_answer": "4.3 you must pass the array and its size to the function. Ex. function(array, size);",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 0.0
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_7",
        "student_answer": "4.3 Usually the same way you pass anything else... you do not have to specify the length of a char array, just pass it to the function by sending the name of the array. Example: char str[20]; isPalindrome(str); // this sends the char array to the function isPalindrome. Otherwise, would need to send the length of the array as well.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.0
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_8",
        "student_answer": "4.3 you pass a pointer to the first item and also pass the size.",
        "human_scores": [
            3.5,
            4.0,
            3.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.25
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_9",
        "student_answer": "4.3 By reference.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.25
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_10",
        "student_answer": "4.3 In two parts, the array itself, and it's size, so that the function it's being passed to can avoid out of bounds errors.",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 0.0
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_11",
        "student_answer": "4.3 Specify array name without brackets. Array size is normally passed as another argument so the function can process the specific number of elements in the array. Arrays are passed by reference. Individual array elements passed by value. Functions that take arrays as arguments.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_12",
        "student_answer": "4.3 Arrays are passed by reference.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_13",
        "student_answer": "4.3 the same way but with [] at the declaration and the actual function.",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.0
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_14",
        "student_answer": "4.3 specify the array name without brackets.",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.25
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_15",
        "student_answer": "4.3 by reference",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_16",
        "student_answer": "4.3 You pass the name of the array to the function. So for: int bin [10]; you pass it to an array like so: jingle(bin); but jingle must be declared correctly in order to receive an array, either with prototype void jingle (int []); or with the definition in its initialization: void jingle (int array[]); It's also worth noting that arrays are passed to function by reference, so as to not copy large arrays over and over and burn memory. This gives the function complete control over the array however.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_17",
        "student_answer": "4.3 They are called by the function then the function must loop through the array to get the set of characters.",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.0
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_18",
        "student_answer": "4.3 by reference by default, unless you specify const, at which the later will make the array unmodifiable.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.25
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_19",
        "student_answer": "4.3 The function recieves both the array and the array size as parameters. function(arrayName, arraySize)",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 0.0
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_20",
        "student_answer": "4.3 specifying array name and passing as reference in an argument into the function",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_21",
        "student_answer": "4.3 1st you must specify the array name without brackets and then the array name and size are passed as two arguments in the function call.",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 0.0
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_22",
        "student_answer": "4.3 arrays are passed by reference, passing the starting address of array. programmer specifies the array name without brackets and passes the array size as another argument so the function can process the specific number of elements in the array",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_23",
        "student_answer": "4.3 by reference only",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_24",
        "student_answer": "4.3 by reference",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_25",
        "student_answer": "4.3 by reference",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_26",
        "student_answer": "4.3 by refrence",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.4
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_27",
        "student_answer": "4.3 function( int [], int length)",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 0.0
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_28",
        "student_answer": "4.3 by reference",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_29",
        "student_answer": "4.3 by reference",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.3 How are arrays passed to functions?",
        "student_id": "student_30",
        "student_answer": "4.3 The function reads the variables, stores them. then returns the what ever the variable reads. The function then prints the content of the array.",
        "human_scores": [
            2.5,
            1.0,
            4.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.0
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_1",
        "student_answer": "4.4 a static array will store the new values that were assigned to each of its elements. meaning if you call a function twice it will use the last values that were returned the first time. if you don't declare it static then the new values will not be stored and will be reset to their original value",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.75
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_2",
        "student_answer": "4.4 a static array can only be referenced not accessed. Also static arrays can be used without creating an object.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.0
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_3",
        "student_answer": "4.4 An array declared as static is not created and and initialized each time the function and it is also not destroyed when the function terminates.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.0
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_4",
        "student_answer": "4.4 A program intializes static local arrays when their declarations are first encountered. If a static array is not initialized explicityly by the programmer, earch element of that array is intialized to zero by the compiler when the array is created. Non-static array members cannot be initialized at all in C++.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.0
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_5",
        "student_answer": "4.4 Arrays that are static remain the same size throughout the program execution.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.0
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_6",
        "student_answer": "4.4 a static array will only be initilized once, a non static array will be re-initilized once the program reaches the initilization line again.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_7",
        "student_answer": "4.4 An array declared as static is available from beginning of program to end. One w/o static declaration disappears if it is not accessed within the right scope.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.0
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_8",
        "student_answer": "4.4 a static array has pre-runtime size and that size cannot be changed. A dynamic array gets its size at runtime.",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.5
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_9",
        "student_answer": "4.4 If an array is declared as static, it is not created each time the array is called.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.25
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_10",
        "student_answer": "4.4 An array that is not declared as static will re-initialize every time the function declaring it is called. A static array will initialize only once, at the declaration, and will store the values in it's elements throughout the duration of the program, even if the same function is called multiple times, a static array will only initialize once.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_11",
        "student_answer": "4.4 All elements are initialized to zero if not explicitly initialized, this does not happen for automatic local arrays",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.25
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_12",
        "student_answer": "4.4 All elements are initialized to zero if not explicitly initialized for a static array, while a non-static array is not initialized to zero.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.0
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_13",
        "student_answer": "4.4 static cannot be changed",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.0
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_14",
        "student_answer": "4.4 A static array has a set size that cannot change. The data may not need all of the space assigned, or could go beyond the size.",
        "human_scores": [
            4.0,
            3.0,
            5.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 0.0
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_15",
        "student_answer": "4.4 A static member prevents naming conflicts (not put into global namespace) while allowing for information hiding (private, public).",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.0
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_16",
        "student_answer": "4.4 A static local array exists for the duration of the program and its elements are initialized to 0 if not explicitly initialized. So a static local array's elements will still be the same when called later unless specifically initialized to something else. This doesn't happen for automatic arrays.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_17",
        "student_answer": "4.4 Static arrays are those with a declared size, that is known to the program, whereas non-static arrays leave the size undeclared and open so it can be assigned later. Usually used for input purposes.",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.0
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_18",
        "student_answer": "4.4 static arrays keep the values after the end of a function, while non static reinitialize every time.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_19",
        "student_answer": "4.4 Static arrays are created and initialized only once, and the values aren't destroyed when the function terminates in the program. Automatic arrays reset everytime the function is called.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_20",
        "student_answer": "4.4 its not created and initialized each time program calls the function, and is not destroyed every time the function ends in the program.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_21",
        "student_answer": "4.4 When we declare it static the array is not destroyed after the function is over. When an array is not declared as static, the array is created and initialized every time a function calls it.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_22",
        "student_answer": "4.4 the static array exists for the duration of the program",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.0
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_23",
        "student_answer": "4.4 an array declared as static can only be declared once",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.0
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_24",
        "student_answer": "4.4 A static array exists in memory until the program terminates, whereas an automatic (or normal) array is removed when the function that created it terminates",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_25",
        "student_answer": "4.4 not answered",
        "human_scores": [
            0.0,
            0.0,
            0.0
        ],
        "human_avg_score": 0.0,
        "procot_score": 0.0
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_26",
        "student_answer": "4.4 Only constants can be used to declare the size of automatic and static arrays Exists for the duration of the program Is initialized when its declaration is first encountered All elements are initialized to zero if not explicitly initialized",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 1.75
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_27",
        "student_answer": "4.4 A static array cannot be changed in the program.",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.0
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_28",
        "student_answer": "4.4 static arrays are available throughout the program",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 1.25
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_29",
        "student_answer": "4.4 a static array is allocated when the program starts and is freed when the program exits but has limited scope, while an array that is not declared static is allocated and freed when it comes into and out of scope.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.4 What is the difference between an array declared as static, and one that is not?",
        "student_id": "student_30",
        "student_answer": "4.4 if they are declared fixed or static that means they can't change size once their storage has been allocated, however one that is not or dynamic arrarys can be resized.",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_1",
        "student_answer": "4.5 at least 2, depending on how many arrays are being used.",
        "human_scores": [
            2.5,
            1.0,
            4.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_2",
        "student_answer": "4.5 all of them.",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 0.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_3",
        "student_answer": "4.5 When passing a multi-dimensional array, all dimensions must be specified except for the first dimension.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_4",
        "student_answer": "4.5 It depends what parameters you are passing in a multidimensional. A multideminsional can have more than two dimensions.",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 0.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_5",
        "student_answer": "4.5 The first dimension is not required however the subsequent dimension(s) are needed for the compiler.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_6",
        "student_answer": "4.5 all but the first",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_7",
        "student_answer": "4.5 All of the dimensions must be specified.",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 0.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_8",
        "student_answer": "4.5 just the first one at least.",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 1.75
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_9",
        "student_answer": "4.5 Two paramaters, the array and how many columns. array(a[],[3])",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.5
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_10",
        "student_answer": "4.5 The size of the first dimension can be omitted, same as a regular array. However, for every dimension outside the first, the size of those dimensions must be specified when passed, for example, a multi-dimensional array of [2][4][6] with the name MultiArray would be passed as: \"MultiArray[][4][6], 2\"",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 5.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_11",
        "student_answer": "4.5 Size of subsequent dimensions are required. Compiler must know how many elements to skip to move to the second element in the first dimension",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 4.5
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_12",
        "student_answer": "4.5 Every dimension after the first.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_13",
        "student_answer": "4.5 both",
        "human_scores": [
            2.5,
            2.0,
            3.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.5
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_14",
        "student_answer": "4.5 the size of the first dimension does not need to be specified, but all other dimensions do.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_15",
        "student_answer": "4.5 when passing (in main) a multidimensional array to a function, no dimensions need be specified",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 1.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_16",
        "student_answer": "4.5 All dimensions except for the first one need to be specified when passing an array to a function, the compiler needs to know how many memory addresses to skip to make it back to the 2nd element in the first dimension. The size of the first dimension does not need to be specified.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_17",
        "student_answer": "4.5 as many as there are dimensions. Most commonly just rows and columns",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 1.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_18",
        "student_answer": "4.5 at least 2, but it should always equal the number of dimensions that the argument is expecting... like... blah[][][][] will require 4 dimensional array input. blah[][][] will require a 3 dimensional array. blah[][] will require a 2 dimensional array.",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_19",
        "student_answer": "4.5 None, just pass the array name.",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_20",
        "student_answer": "4.5 all subsequent dimensions after the first dimension. first is not needed to be specified.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_21",
        "student_answer": "4.5 all dimensions, excluding the first one.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_22",
        "student_answer": "4.5 all dimensions but the first",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_23",
        "student_answer": "4.5 the first needs to be specified by size and the rest need only be stated( first like this [3] then [][][])",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 2.5
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_24",
        "student_answer": "4.5 one less than the number of dimensions the array contains",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 4.5
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_25",
        "student_answer": "4.5 not answered",
        "human_scores": [
            0.0,
            0.0,
            0.0
        ],
        "human_avg_score": 0.0,
        "procot_score": 0.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_26",
        "student_answer": "4.5 one",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_27",
        "student_answer": "4.5 All subsequent dimensions after the first one.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_28",
        "student_answer": "4.5 two or more",
        "human_scores": [
            2.5,
            1.0,
            4.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.0
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_29",
        "student_answer": "4.5 1 less than the total number of dimensions",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 4.5
    },
    {
        "question": "4.5 How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?",
        "student_id": "student_30",
        "student_answer": "4.5 Multi dimensional arrays are accessed using more than 1 index, one for each dimension at least.",
        "human_scores": [
            3.5,
            2.0,
            5.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 0.0
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_1",
        "student_answer": "4.6 compilation error",
        "human_scores": [
            1.0,
            0.0,
            2.0
        ],
        "human_avg_score": 1.0,
        "procot_score": 0.0
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_2",
        "student_answer": "4.6 compilation error.",
        "human_scores": [
            1.0,
            0.0,
            2.0
        ],
        "human_avg_score": 1.0,
        "procot_score": 0.0
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_3",
        "student_answer": "4.6 Using an index outside the bounds of the array generates a run-time error.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_4",
        "student_answer": "4.6 run-time error",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_5",
        "student_answer": "4.6 Its a run-time error.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_6",
        "student_answer": "4.6 run time error",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_7",
        "student_answer": "4.6 Run-time error.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.0
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_8",
        "student_answer": "4.6 run-time error",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_9",
        "student_answer": "4.6 compilation error",
        "human_scores": [
            1.0,
            0.0,
            2.0
        ],
        "human_avg_score": 1.0,
        "procot_score": 0.0
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_10",
        "student_answer": "4.6 This is a run-time error. The program will compile AND execute, so these errors can be difficult to debug.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.5
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_11",
        "student_answer": "4.6 this is a run-time error or execution-time error.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.0
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_12",
        "student_answer": "4.6 Run-time.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.9
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_13",
        "student_answer": "4.6 run time",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_14",
        "student_answer": "4.6 Generates a compilation error. The compiler will complain that the variable you are referring to was never declared.",
        "human_scores": [
            1.0,
            0.0,
            2.0
        ],
        "human_avg_score": 1.0,
        "procot_score": 0.0
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_15",
        "student_answer": "4.6 run-time",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_16",
        "student_answer": "4.6 Run-time error.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.0
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_17",
        "student_answer": "4.6 run time error",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_18",
        "student_answer": "4.6 runtime error.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_19",
        "student_answer": "4.6 Compilation error.",
        "human_scores": [
            1.0,
            0.0,
            2.0
        ],
        "human_avg_score": 1.0,
        "procot_score": 0.0
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_20",
        "student_answer": "4.6 run-time error",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_21",
        "student_answer": "4.6 run-time error",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_22",
        "student_answer": "4.6 run-time error",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_23",
        "student_answer": "4.6 compilation error.",
        "human_scores": [
            1.0,
            0.0,
            2.0
        ],
        "human_avg_score": 1.0,
        "procot_score": 0.0
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_24",
        "student_answer": "4.6 run-time error",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_25",
        "student_answer": "4.6 not answered",
        "human_scores": [
            0.0,
            0.0,
            0.0
        ],
        "human_avg_score": 0.0,
        "procot_score": 0.0
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_26",
        "student_answer": "4.6 run-time error",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_27",
        "student_answer": "4.6 compilation error",
        "human_scores": [
            1.0,
            0.0,
            2.0
        ],
        "human_avg_score": 1.0,
        "procot_score": 0.0
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_28",
        "student_answer": "4.6 compilation error",
        "human_scores": [
            1.0,
            0.0,
            2.0
        ],
        "human_avg_score": 1.0,
        "procot_score": 0.0
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_29",
        "student_answer": "4.6 It will NOT cause a compilation error. It will either give a run-time error, or will give the value at that actual location in memory, causing a logic error.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "4.6 Using an index outside the bounds of the array generates an error. Is this a compilation error or a run-time error?",
        "student_id": "student_30",
        "student_answer": "4.6 it is a run-time error",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_1",
        "student_answer": "4.7 usually it is by rows then followed by the column, but it is up to the programmer to determine how values are stored in bi-dimensional arrays.",
        "human_scores": [
            2.5,
            0.0,
            5.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 2.0
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_2",
        "student_answer": "4.7 by rows.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.85
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_3",
        "student_answer": "4.7 Multi-dimensional arrays are stored in memory by rows.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.9
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_4",
        "student_answer": "4.7 A bi-dimensional/two-dimensional array is stored in a row-column matrix. Where the first index indicates the row and the second indicates the column. This means that when array elements are accessed in the order in which they are actually stored in memory, the right index changes faster than the left.",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 2.9
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_5",
        "student_answer": "4.7 They are stored in memory in rows.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.95
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_6",
        "student_answer": "4.7 rows",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_7",
        "student_answer": "4.7 By rows.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_8",
        "student_answer": "4.7 by rows",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.9
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_9",
        "student_answer": "4.7 m-by-n. by row-column.",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 1.6
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_10",
        "student_answer": "4.7 bi-dimensional arrays are stored by rows",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.85
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_11",
        "student_answer": "4.7 By rows.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_12",
        "student_answer": "4.7 By column.",
        "human_scores": [
            1.0,
            0.0,
            2.0
        ],
        "human_avg_score": 1.0,
        "procot_score": 0.0
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_13",
        "student_answer": "4.7 columns",
        "human_scores": [
            1.0,
            0.0,
            2.0
        ],
        "human_avg_score": 1.0,
        "procot_score": 0.0
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_14",
        "student_answer": "4.7 By rows",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.5
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_15",
        "student_answer": "4.7 by-dimensional arrays are stored by row",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_16",
        "student_answer": "4.7 x by y is row by column. So x is rows, and y is columns. Since the length of the row is not needed when passing the array to the function, this leads me to believe that bi-dimensional arrays are stored by rows at a time.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.375
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_17",
        "student_answer": "4.7 Both, they are stored in seperate sections.",
        "human_scores": [
            2.5,
            1.0,
            4.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.0
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_18",
        "student_answer": "4.7 by rows, then columns.",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.75
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_19",
        "student_answer": "4.7 Rows",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.9
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_20",
        "student_answer": "4.7 by rows of rows",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.15
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_21",
        "student_answer": "4.7 by rows",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.9
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_22",
        "student_answer": "4.7 rows",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_23",
        "student_answer": "4.7 stored by rows",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_24",
        "student_answer": "4.7 by rows",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.9
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_25",
        "student_answer": "4.7 by rows",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.9
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_26",
        "student_answer": "4.7 by rows",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.9
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_27",
        "student_answer": "4.7 rows",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.75
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_28",
        "student_answer": "4.7 by row and column",
        "human_scores": [
            2.5,
            1.0,
            4.0
        ],
        "human_avg_score": 2.5,
        "procot_score": 0.9
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_29",
        "student_answer": "4.7 by rows",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 2.9
    },
    {
        "question": "4.7 How are bi-dimensional arrays stored in memory, by rows or by columns?",
        "student_id": "student_30",
        "student_answer": "4.7 No answer",
        "human_scores": [
            1.0,
            0.0,
            2.0
        ],
        "human_avg_score": 1.0,
        "procot_score": 0.0
    },
    {
        "question": "5.1 In one sentence, what is the main idea implemented by insertion sort?",
        "student_id": "student_1",
        "student_answer": "5.1 Takes an element of an array and compares it with the next element, depending on the values of the two elements they will switch and then the program will compare the new switched element with the next one in the array.",
        "human_scores": [
            3.0,
            1.0,
            5.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 0.0
    },
    {
        "question": "5.1 In one sentence, what is the main idea implemented by insertion sort?",
        "student_id": "student_2",
        "student_answer": "5.1 Insertion sort divides the list into sorted and unsorted regions, then takes each item from the unsorted region and inserts it into its correct order in the sorted region.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.5
    },
    {
        "question": "5.1 In one sentence, what is the main idea implemented by insertion sort?",
        "student_id": "student_3",
        "student_answer": "5.1 The sorted array or list is built one entry at a time.",
        "human_scores": [
            3.5,
            3.0,
            4.0
        ],
        "human_avg_score": 3.5,
        "procot_score": 2.0
    },
    {
        "question": "5.1 In one sentence, what is the main idea implemented by insertion sort?",
        "student_id": "student_4",
        "student_answer": "5.1 It starts with the second element and checks it to see if it is less than the element(s) to the left of it and if it is it inserts it into its corrected position.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 4.0
    },
    {
        "question": "5.1 In one sentence, what is the main idea implemented by insertion sort?",
        "student_id": "student_5",
        "student_answer": "5.1 Compare two numbers at a time and swap until the entire list is sorted.",
        "human_scores": [
            2.0,
            1.0,
            3.0
        ],
        "human_avg_score": 2.0,
        "procot_score": 0.0
    },
    {
        "question": "5.1 In one sentence, what is the main idea implemented by insertion sort?",
        "student_id": "student_6",
        "student_answer": "5.1 Assume the first number is sorted, then move down the list and 'insert' the numbers you come across into the corresponding place on the sorted side of the list.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "5.1 In one sentence, what is the main idea implemented by insertion sort?",
        "student_id": "student_7",
        "student_answer": "5.1 insertion sort is were after k iterations the first k items in the array are sorted it take the k+1 item and inserts it into the correct position in the already sorted k elements.",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 4.75
    },
    {
        "question": "5.1 In one sentence, what is the main idea implemented by insertion sort?",
        "student_id": "student_8",
        "student_answer": "5.1 Looking at the 2nd element move forward and place the element in the correct spot.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 3.25
    },
    {
        "question": "5.1 In one sentence, what is the main idea implemented by insertion sort?",
        "student_id": "student_9",
        "student_answer": "5.1 Starting at the beginning of an array, take each element in order and place it in it's correct position relative to all previously sorted elements.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 5.0
    },
    {
        "question": "5.1 In one sentence, what is the main idea implemented by insertion sort?",
        "student_id": "student_10",
        "student_answer": "5.1 To sort the elements in an array by removing an element from the input data and inserting it at the correct position.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "5.1 In one sentence, what is the main idea implemented by insertion sort?",
        "student_id": "student_11",
        "student_answer": "5.1 Insertion sort removes an element from the data, and inserts it at the correct position in the already sorted list.",
        "human_scores": [
            5.0,
            5.0,
            5.0
        ],
        "human_avg_score": 5.0,
        "procot_score": 3.0
    },
    {
        "question": "5.1 In one sentence, what is the main idea implemented by insertion sort?",
        "student_id": "student_12",
        "student_answer": "5.1 Take a number and choose a pivot point and insert the number in the correct position from the pivot point.",
        "human_scores": [
            3.0,
            2.0,
            4.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 1.0
    },
    {
        "question": "5.1 In one sentence, what is the main idea implemented by insertion sort?",
        "student_id": "student_13",
        "student_answer": "5.1 have a marker and sort everything to the left of the value for every new value when moving to the right.",
        "human_scores": [
            3.0,
            3.0,
            3.0
        ],
        "human_avg_score": 3.0,
        "procot_score": 3.5
    },
    {
        "question": "5.1 In one sentence, what is the main idea implemented by insertion sort?",
        "student_id": "student_14",
        "student_answer": "5.1 The main idea behind insertion sort is to take a random variable from the right and insert it in order to the left.",
        "human_scores": [
            4.5,
            4.0,
            5.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 1.5
    },
    {
        "question": "5.1 In one sentence, what is the main idea implemented by insertion sort?",
        "student_id": "student_15",
        "student_answer": "5.1 Insertion sort progresses through a list of elements and determines where the next element should be inserted into an already sorted array starting with sorting and using the first two elements.",
        "human_scores": [
            4.5,
            5.0,
            4.0
        ],
        "human_avg_score": 4.5,
        "procot_score": 4.0
    },
    {
        "question": "5.1 In one sentence, what is the main idea implemented by insertion sort?",
        "student_id": "student_16",
        "student_answer": "5.1 it goes through the list only once, picking each integer and putting it in its desired position, then continuing.",
        "human_scores": [
            4.0,
            4.0,
            4.0
        ],
        "human_avg_score": 4.0,
        "procot_score": 3.0
    }
]