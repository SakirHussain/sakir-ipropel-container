{
    "evaluations_done": 650,
    "MAE": 1.4913307692307693,
    "MSE": 3.3111861153846154,
    "Pearson_Correlation": 0.6982620926113812,
    "Overall_Error_Percentage": 86.0,
    "Error_Distribution": {
        "0-1 marks": 29.230769230769234,
        "1-2 marks": 34.46153846153846,
        "2-3 marks": 24.461538461538463,
        "3-4 marks": 10.0,
        "4+ marks": 1.8461538461538463
    },
    "recent_25_results": [
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_7",
            "student_answer": "3.3 It expands a small function out... making your code longer, but also makes it run faster.",
            "human_scores": [
                4.0,
                4.0,
                4.0
            ],
            "human_avg_score": 4.0,
            "procot_score": 3.0
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_8",
            "student_answer": "3.3 the function is not treated as a separate unit like other functions",
            "human_scores": [
                3.5,
                4.0,
                3.0
            ],
            "human_avg_score": 3.5,
            "procot_score": 1.5
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_9",
            "student_answer": "3.3 When the program compiles,it will copy the function inplace, avoiding a function call.",
            "human_scores": [
                5.0,
                5.0,
                5.0
            ],
            "human_avg_score": 5.0,
            "procot_score": 3.25
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_10",
            "student_answer": "3.3 It replaces all instances of that function call with the inline code itself, resulting in longer but faster programs.",
            "human_scores": [
                5.0,
                5.0,
                5.0
            ],
            "human_avg_score": 5.0,
            "procot_score": 5.0
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_11",
            "student_answer": "3.3 The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.",
            "human_scores": [
                3.0,
                2.0,
                4.0
            ],
            "human_avg_score": 3.0,
            "procot_score": 0.5
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_12",
            "student_answer": "3.3 Ignores the inline qualifier and typically does so for all but the smallest functions.",
            "human_scores": [
                3.0,
                2.0,
                4.0
            ],
            "human_avg_score": 3.0,
            "procot_score": 0.0
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_13",
            "student_answer": "3.3 If the function is small enough it will expand it but it will run faster as it will avoid making so many calls to the function.",
            "human_scores": [
                4.5,
                5.0,
                4.0
            ],
            "human_avg_score": 4.5,
            "procot_score": 2.5
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_14",
            "student_answer": "3.3 it treats them as the same function",
            "human_scores": [
                2.0,
                2.0,
                2.0
            ],
            "human_avg_score": 2.0,
            "procot_score": 0.0
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_15",
            "student_answer": "3.3 Inline functions are copied in place, instead of being referenced.",
            "human_scores": [
                5.0,
                5.0,
                5.0
            ],
            "human_avg_score": 5.0,
            "procot_score": 2.5
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_16",
            "student_answer": "3.3 For inline functions, the compiler creates a copy of the function's code in place so it doesn't have to make a function call and add to the function call stack.",
            "human_scores": [
                5.0,
                5.0,
                5.0
            ],
            "human_avg_score": 5.0,
            "procot_score": 4.0
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_17",
            "student_answer": "3.3 it generates a copy of the function's coding which eliminates calling the function",
            "human_scores": [
                5.0,
                5.0,
                5.0
            ],
            "human_avg_score": 5.0,
            "procot_score": 3.0
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_18",
            "student_answer": "3.3 not answered",
            "human_scores": [
                0.0,
                0.0,
                0.0
            ],
            "human_avg_score": 0.0,
            "procot_score": 0.0
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_19",
            "student_answer": "3.3 It generates a copy of the function's code by by inserting it in the program.",
            "human_scores": [
                4.5,
                4.0,
                5.0
            ],
            "human_avg_score": 4.5,
            "procot_score": 2.75
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_20",
            "student_answer": "3.3 tells the compiler to make a copy of function's code in place to avoid a function call. it typically ignores it, except for the smallest functions.",
            "human_scores": [
                5.0,
                5.0,
                5.0
            ],
            "human_avg_score": 5.0,
            "procot_score": 3.5
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_21",
            "student_answer": "3.3 The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.",
            "human_scores": [
                2.0,
                2.0,
                2.0
            ],
            "human_avg_score": 2.0,
            "procot_score": 0.5
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_22",
            "student_answer": "3.3 Multiple copies of the function code are inserted into the program, making it bigger.",
            "human_scores": [
                4.5,
                4.0,
                5.0
            ],
            "human_avg_score": 4.5,
            "procot_score": 3.5
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_23",
            "student_answer": "3.3 compiler ignores inline qualifier",
            "human_scores": [
                2.5,
                2.0,
                3.0
            ],
            "human_avg_score": 2.5,
            "procot_score": 0.0
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_24",
            "student_answer": "3.3 It generates a copy of the function, if it is needed again.",
            "human_scores": [
                3.5,
                2.0,
                5.0
            ],
            "human_avg_score": 3.5,
            "procot_score": 3.0
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_25",
            "student_answer": "3.3 The complier includes copies of inline functions instead of making function calls, but usually only with very small functions.",
            "human_scores": [
                5.0,
                5.0,
                5.0
            ],
            "human_avg_score": 5.0,
            "procot_score": 3.25
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_26",
            "student_answer": "3.3 Compiler generate a copy of the function's code in place (when appropriate) to avoid a function call",
            "human_scores": [
                5.0,
                5.0,
                5.0
            ],
            "human_avg_score": 5.0,
            "procot_score": 3.0
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_27",
            "student_answer": "3.3 instead of calling the function every time it is invoked, the compiler will replace the function call with a copy of the function body",
            "human_scores": [
                5.0,
                5.0,
                5.0
            ],
            "human_avg_score": 5.0,
            "procot_score": 3.75
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_28",
            "student_answer": "3.3 Expands the function into the program",
            "human_scores": [
                4.0,
                4.0,
                4.0
            ],
            "human_avg_score": 4.0,
            "procot_score": 2.5
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_29",
            "student_answer": "3.3 it generates a copy of the functions code in place to avoid a function call",
            "human_scores": [
                5.0,
                5.0,
                5.0
            ],
            "human_avg_score": 5.0,
            "procot_score": 4.5
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_30",
            "student_answer": "3.3 the function call will be replaced by the code that was defined in the inline function",
            "human_scores": [
                5.0,
                5.0,
                5.0
            ],
            "human_avg_score": 5.0,
            "procot_score": 2.0
        },
        {
            "question": "3.3 How does the compiler handle inline functions?",
            "student_id": "student_31",
            "student_answer": "3.3 When the compiler inline-expands a function call, the function's code gets inserted into the caller's code stream (conceptually similar to what happens with a #define macro). This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code — optimize the called code into the caller.",
            "human_scores": [
                4.5,
                4.0,
                5.0
            ],
            "human_avg_score": 4.5,
            "procot_score": 3.0
        }
    ]
}